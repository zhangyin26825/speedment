package com.zhangyin.speedment.speedment.db0.sakila.store.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.customer.Customer;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.Inventory;
import com.zhangyin.speedment.speedment.db0.sakila.staff.Staff;
import com.zhangyin.speedment.speedment.db0.sakila.store.Store;
import com.zhangyin.speedment.speedment.db0.sakila.store.StoreImpl;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.store.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedStoreImpl extends AbstractBaseEntity<Store> implements Store {
    
    private Byte storeId;
    private Byte managerStaffId;
    private Short addressId;
    private Timestamp lastUpdate;
    
    protected GeneratedStoreImpl() {
        
    }
    
    @Override
    public Address findAddressId() {
        return managerOf_(Address.class).findAny(Address.ADDRESS_ID, getAddressId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Address is set to " + getAddressId()
                ));
            
    }
    
    @Override
    public Staff findManagerStaffId() {
        return managerOf_(Staff.class).findAny(Staff.STAFF_ID, getManagerStaffId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Staff is set to " + getManagerStaffId()
                ));
            
    }
    
    @Override
    public Byte getStoreId() {
        return storeId;
    }
    
    @Override
    public Byte getManagerStaffId() {
        return managerStaffId;
    }
    
    @Override
    public Short getAddressId() {
        return addressId;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Store setStoreId(Byte storeId) {
        this.storeId = storeId;
        return this;
    }
    
    @Override
    public final Store setManagerStaffId(Byte managerStaffId) {
        this.managerStaffId = managerStaffId;
        return this;
    }
    
    @Override
    public final Store setAddressId(Short addressId) {
        this.addressId = addressId;
        return this;
    }
    
    @Override
    public final Store setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<Customer> findCustomersByStoreId() {
        return managerOf_(Customer.class)
                .stream().filter(Customer.STORE_ID.equal(this.getStoreId()));
    }
    
    @Override
    public Stream<Inventory> findInventoriesByStoreId() {
        return managerOf_(Inventory.class)
                .stream().filter(Inventory.STORE_ID.equal(this.getStoreId()));
    }
    
    @Override
    public Stream<Staff> findStaffsByStoreId() {
        return managerOf_(Staff.class)
                .stream().filter(Staff.STORE_ID.equal(this.getStoreId()));
    }
    
    @Override
    public Stream<Staff> findStaffs() {
        return findStaffsByStoreId();
    }
    
    @Override
    public Stream<Inventory> findInventories() {
        return findInventoriesByStoreId();
    }
    
    @Override
    public Stream<Customer> findCustomers() {
        return findCustomersByStoreId();
    }
    
    @Override
    public Store copy() {
        final Store store = new StoreImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedStoreImpl.this.speedment();
            }
        };
        
        setStoreId(store.getStoreId());
        setManagerStaffId(store.getManagerStaffId());
        setAddressId(store.getAddressId());
        setLastUpdate(store.getLastUpdate());
        
        return store;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("storeId = "+Objects.toString(getStoreId()));
        sj.add("managerStaffId = "+Objects.toString(getManagerStaffId()));
        sj.add("addressId = "+Objects.toString(getAddressId()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "StoreImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Store)) { return false; }
        final Store thatStore = (Store)that;
        if (!Objects.equals(this.getStoreId(), thatStore.getStoreId())) {return false; }
        if (!Objects.equals(this.getManagerStaffId(), thatStore.getManagerStaffId())) {return false; }
        if (!Objects.equals(this.getAddressId(), thatStore.getAddressId())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatStore.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getStoreId());
        hash = 31 * hash + Objects.hashCode(getManagerStaffId());
        hash = 31 * hash + Objects.hashCode(getAddressId());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Store> entityClass() {
        return Store.class;
    }
}