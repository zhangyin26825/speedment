package com.zhangyin.speedment.speedment.db0.sakila.store.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.ByteIdentityMapper;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.customer.Customer;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.Inventory;
import com.zhangyin.speedment.speedment.db0.sakila.staff.Staff;
import com.zhangyin.speedment.speedment.db0.sakila.store.Store;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.store.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedStore extends Entity<Store> {
    
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getStoreId()} method.
     */
    final ComparableField<Store, Byte, Byte> STORE_ID = new ComparableFieldImpl<>(Identifier.STORE_ID, Store::getStoreId, Store::setStoreId, new ByteIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getManagerStaffId()} method.
     */
    final ComparableForeignKeyField<Store, Byte, Byte, Staff> MANAGER_STAFF_ID = new ComparableForeignKeyFieldImpl<>(Identifier.MANAGER_STAFF_ID, Store::getManagerStaffId, Store::setManagerStaffId, Store::findManagerStaffId, new ByteIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getAddressId()} method.
     */
    final ComparableForeignKeyField<Store, Short, Short, Address> ADDRESS_ID = new ComparableForeignKeyFieldImpl<>(Identifier.ADDRESS_ID, Store::getAddressId, Store::setAddressId, Store::findAddressId, new ShortIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getLastUpdate()} method.
     */
    final ComparableField<Store, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, Store::getLastUpdate, Store::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Address} referenced by the
     * field that can be obtained using {@link Store#getAddressId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Store entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Address} referenced by the field
     * that can be obtained using {@link Store#getAddressId()}
     */
    Address findAddressId();
    
    /**
     * Finds and returns the foreign key Entity {@link Staff} referenced by the
     * field that can be obtained using {@link Store#getManagerStaffId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Store entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Staff} referenced by the field that
     * can be obtained using {@link Store#getManagerStaffId()}
     */
    Staff findManagerStaffId();
    
    /**
     * Returns the storeId of this Store. The storeId field corresponds to the
     * database column db0.sakila.store.store_id.
     * 
     * @return the storeId of this Store
     */
    Byte getStoreId();
    
    /**
     * Returns the managerStaffId of this Store. The managerStaffId field
     * corresponds to the database column db0.sakila.store.manager_staff_id.
     * 
     * @return the managerStaffId of this Store
     */
    Byte getManagerStaffId();
    
    /**
     * Returns the addressId of this Store. The addressId field corresponds to
     * the database column db0.sakila.store.address_id.
     * 
     * @return the addressId of this Store
     */
    Short getAddressId();
    
    /**
     * Returns the lastUpdate of this Store. The lastUpdate field corresponds to
     * the database column db0.sakila.store.last_update.
     * 
     * @return the lastUpdate of this Store
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the storeId of this Store. The storeId field corresponds to the
     * database column db0.sakila.store.store_id.
     * 
     * @param storeId to set of this Store
     * @return this Store instance
     */
    Store setStoreId(Byte storeId);
    
    /**
     * Sets the managerStaffId of this Store. The managerStaffId field
     * corresponds to the database column db0.sakila.store.manager_staff_id.
     * 
     * @param managerStaffId to set of this Store
     * @return this Store instance
     */
    Store setManagerStaffId(Byte managerStaffId);
    
    /**
     * Sets the addressId of this Store. The addressId field corresponds to the
     * database column db0.sakila.store.address_id.
     * 
     * @param addressId to set of this Store
     * @return this Store instance
     */
    Store setAddressId(Short addressId);
    
    /**
     * Sets the lastUpdate of this Store. The lastUpdate field corresponds to the
     * database column db0.sakila.store.last_update.
     * 
     * @param lastUpdate to set of this Store
     * @return this Store instance
     */
    Store setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Customer} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Customer#getStoreId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Customer} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Customer#getStoreId()}
     */
    Stream<Customer> findCustomersByStoreId();
    
    /**
     * Creates and returns a {@link Stream} of all {@link Inventory} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link Inventory#getStoreId()}. The order of the Entities are
     * undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Inventory} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Inventory#getStoreId()}
     */
    Stream<Inventory> findInventoriesByStoreId();
    
    /**
     * Creates and returns a {@link Stream} of all {@link Staff} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Staff#getStoreId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Staff} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Staff#getStoreId()}
     */
    Stream<Staff> findStaffsByStoreId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Staff} Entities that references this Entity by a foreign key. The order of
     * the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Staff} Entities
     * that references this Entity by a foreign key
     */
    Stream<Staff> findStaffs();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Inventory} Entities that references this Entity by a foreign key. The
     * order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Inventory}
     * Entities that references this Entity by a foreign key
     */
    Stream<Inventory> findInventories();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Customer} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Customer}
     * Entities that references this Entity by a foreign key
     */
    Stream<Customer> findCustomers();
    
    enum Identifier implements FieldIdentifier<Store> {
        
        STORE_ID ("store_id"),
        MANAGER_STAFF_ID ("manager_staff_id"),
        ADDRESS_ID ("address_id"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "store";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}