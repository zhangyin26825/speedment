package com.zhangyin.speedment.speedment.db0.sakila.film.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.BigDecimalIdentityMapper;
import com.speedment.config.db.mapper.identity.ByteIdentityMapper;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.film.Film;
import com.zhangyin.speedment.speedment.db0.sakila.film_actor.FilmActor;
import com.zhangyin.speedment.speedment.db0.sakila.film_category.FilmCategory;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.Inventory;
import com.zhangyin.speedment.speedment.db0.sakila.language.Language;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.film.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedFilm extends Entity<Film> {
    
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getFilmId()} method.
     */
    final ComparableField<Film, Short, Short> FILM_ID = new ComparableFieldImpl<>(Identifier.FILM_ID, Film::getFilmId, Film::setFilmId, new ShortIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getTitle()} method.
     */
    final StringField<Film, String> TITLE = new StringFieldImpl<>(Identifier.TITLE, Film::getTitle, Film::setTitle, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getDescription()} method.
     */
    final StringField<Film, String> DESCRIPTION = new StringFieldImpl<>(Identifier.DESCRIPTION, o -> o.getDescription().orElse(null), Film::setDescription, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getReleaseYear()} method.
     */
    final ComparableField<Film, Integer, Integer> RELEASE_YEAR = new ComparableFieldImpl<>(Identifier.RELEASE_YEAR, o -> o.getReleaseYear().orElse(null), Film::setReleaseYear, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLanguageId()} method.
     */
    final ComparableForeignKeyField<Film, Byte, Byte, Language> LANGUAGE_ID = new ComparableForeignKeyFieldImpl<>(Identifier.LANGUAGE_ID, Film::getLanguageId, Film::setLanguageId, Film::findLanguageId, new ByteIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getOriginalLanguageId()} method.
     */
    final ComparableForeignKeyField<Film, Byte, Byte, Language> ORIGINAL_LANGUAGE_ID = new ComparableForeignKeyFieldImpl<>(Identifier.ORIGINAL_LANGUAGE_ID, o -> o.getOriginalLanguageId().orElse(null), Film::setOriginalLanguageId, fk -> fk.findOriginalLanguageId().orElse(null), new ByteIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRentalDuration()} method.
     */
    final ComparableField<Film, Byte, Byte> RENTAL_DURATION = new ComparableFieldImpl<>(Identifier.RENTAL_DURATION, Film::getRentalDuration, Film::setRentalDuration, new ByteIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRentalRate()} method.
     */
    final ComparableField<Film, BigDecimal, BigDecimal> RENTAL_RATE = new ComparableFieldImpl<>(Identifier.RENTAL_RATE, Film::getRentalRate, Film::setRentalRate, new BigDecimalIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLength()} method.
     */
    final ComparableField<Film, Short, Short> LENGTH = new ComparableFieldImpl<>(Identifier.LENGTH, o -> o.getLength().orElse(null), Film::setLength, new ShortIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getReplacementCost()} method.
     */
    final ComparableField<Film, BigDecimal, BigDecimal> REPLACEMENT_COST = new ComparableFieldImpl<>(Identifier.REPLACEMENT_COST, Film::getReplacementCost, Film::setReplacementCost, new BigDecimalIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRating()} method.
     */
    final StringField<Film, String> RATING = new StringFieldImpl<>(Identifier.RATING, o -> o.getRating().orElse(null), Film::setRating, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getSpecialFeatures()} method.
     */
    final StringField<Film, String> SPECIAL_FEATURES = new StringFieldImpl<>(Identifier.SPECIAL_FEATURES, o -> o.getSpecialFeatures().orElse(null), Film::setSpecialFeatures, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLastUpdate()} method.
     */
    final ComparableField<Film, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, Film::getLastUpdate, Film::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Language} referenced by
     * the field that can be obtained using {@link Film#getLanguageId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Film entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Language} referenced by the field
     * that can be obtained using {@link Film#getLanguageId()}
     */
    Language findLanguageId();
    
    /**
     * Finds and returns the foreign key Entity {@link Language} referenced by
     * the field that can be obtained using {@link Film#getOriginalLanguageId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Film entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Language} referenced by the field
     * that can be obtained using {@link Film#getOriginalLanguageId()}
     */
    Optional<Language> findOriginalLanguageId();
    
    /**
     * Returns the filmId of this Film. The filmId field corresponds to the
     * database column db0.sakila.film.film_id.
     * 
     * @return the filmId of this Film
     */
    Short getFilmId();
    
    /**
     * Returns the title of this Film. The title field corresponds to the
     * database column db0.sakila.film.title.
     * 
     * @return the title of this Film
     */
    String getTitle();
    
    /**
     * Returns the description of this Film. The description field corresponds to
     * the database column db0.sakila.film.description.
     * 
     * @return the description of this Film
     */
    Optional<String> getDescription();
    
    /**
     * Returns the releaseYear of this Film. The releaseYear field corresponds to
     * the database column db0.sakila.film.release_year.
     * 
     * @return the releaseYear of this Film
     */
    Optional<Integer> getReleaseYear();
    
    /**
     * Returns the languageId of this Film. The languageId field corresponds to
     * the database column db0.sakila.film.language_id.
     * 
     * @return the languageId of this Film
     */
    Byte getLanguageId();
    
    /**
     * Returns the originalLanguageId of this Film. The originalLanguageId field
     * corresponds to the database column db0.sakila.film.original_language_id.
     * 
     * @return the originalLanguageId of this Film
     */
    Optional<Byte> getOriginalLanguageId();
    
    /**
     * Returns the rentalDuration of this Film. The rentalDuration field
     * corresponds to the database column db0.sakila.film.rental_duration.
     * 
     * @return the rentalDuration of this Film
     */
    Byte getRentalDuration();
    
    /**
     * Returns the rentalRate of this Film. The rentalRate field corresponds to
     * the database column db0.sakila.film.rental_rate.
     * 
     * @return the rentalRate of this Film
     */
    BigDecimal getRentalRate();
    
    /**
     * Returns the length of this Film. The length field corresponds to the
     * database column db0.sakila.film.length.
     * 
     * @return the length of this Film
     */
    Optional<Short> getLength();
    
    /**
     * Returns the replacementCost of this Film. The replacementCost field
     * corresponds to the database column db0.sakila.film.replacement_cost.
     * 
     * @return the replacementCost of this Film
     */
    BigDecimal getReplacementCost();
    
    /**
     * Returns the rating of this Film. The rating field corresponds to the
     * database column db0.sakila.film.rating.
     * 
     * @return the rating of this Film
     */
    Optional<String> getRating();
    
    /**
     * Returns the specialFeatures of this Film. The specialFeatures field
     * corresponds to the database column db0.sakila.film.special_features.
     * 
     * @return the specialFeatures of this Film
     */
    Optional<String> getSpecialFeatures();
    
    /**
     * Returns the lastUpdate of this Film. The lastUpdate field corresponds to
     * the database column db0.sakila.film.last_update.
     * 
     * @return the lastUpdate of this Film
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the filmId of this Film. The filmId field corresponds to the database
     * column db0.sakila.film.film_id.
     * 
     * @param filmId to set of this Film
     * @return this Film instance
     */
    Film setFilmId(Short filmId);
    
    /**
     * Sets the title of this Film. The title field corresponds to the database
     * column db0.sakila.film.title.
     * 
     * @param title to set of this Film
     * @return this Film instance
     */
    Film setTitle(String title);
    
    /**
     * Sets the description of this Film. The description field corresponds to
     * the database column db0.sakila.film.description.
     * 
     * @param description to set of this Film
     * @return this Film instance
     */
    Film setDescription(String description);
    
    /**
     * Sets the releaseYear of this Film. The releaseYear field corresponds to
     * the database column db0.sakila.film.release_year.
     * 
     * @param releaseYear to set of this Film
     * @return this Film instance
     */
    Film setReleaseYear(Integer releaseYear);
    
    /**
     * Sets the languageId of this Film. The languageId field corresponds to the
     * database column db0.sakila.film.language_id.
     * 
     * @param languageId to set of this Film
     * @return this Film instance
     */
    Film setLanguageId(Byte languageId);
    
    /**
     * Sets the originalLanguageId of this Film. The originalLanguageId field
     * corresponds to the database column db0.sakila.film.original_language_id.
     * 
     * @param originalLanguageId to set of this Film
     * @return this Film instance
     */
    Film setOriginalLanguageId(Byte originalLanguageId);
    
    /**
     * Sets the rentalDuration of this Film. The rentalDuration field corresponds
     * to the database column db0.sakila.film.rental_duration.
     * 
     * @param rentalDuration to set of this Film
     * @return this Film instance
     */
    Film setRentalDuration(Byte rentalDuration);
    
    /**
     * Sets the rentalRate of this Film. The rentalRate field corresponds to the
     * database column db0.sakila.film.rental_rate.
     * 
     * @param rentalRate to set of this Film
     * @return this Film instance
     */
    Film setRentalRate(BigDecimal rentalRate);
    
    /**
     * Sets the length of this Film. The length field corresponds to the database
     * column db0.sakila.film.length.
     * 
     * @param length to set of this Film
     * @return this Film instance
     */
    Film setLength(Short length);
    
    /**
     * Sets the replacementCost of this Film. The replacementCost field
     * corresponds to the database column db0.sakila.film.replacement_cost.
     * 
     * @param replacementCost to set of this Film
     * @return this Film instance
     */
    Film setReplacementCost(BigDecimal replacementCost);
    
    /**
     * Sets the rating of this Film. The rating field corresponds to the database
     * column db0.sakila.film.rating.
     * 
     * @param rating to set of this Film
     * @return this Film instance
     */
    Film setRating(String rating);
    
    /**
     * Sets the specialFeatures of this Film. The specialFeatures field
     * corresponds to the database column db0.sakila.film.special_features.
     * 
     * @param specialFeatures to set of this Film
     * @return this Film instance
     */
    Film setSpecialFeatures(String specialFeatures);
    
    /**
     * Sets the lastUpdate of this Film. The lastUpdate field corresponds to the
     * database column db0.sakila.film.last_update.
     * 
     * @param lastUpdate to set of this Film
     * @return this Film instance
     */
    Film setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link FilmActor} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link FilmActor#getFilmId()}. The order of the Entities are
     * undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link FilmActor} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * FilmActor#getFilmId()}
     */
    Stream<FilmActor> findFilmActorsByFilmId();
    
    /**
     * Creates and returns a {@link Stream} of all {@link FilmCategory} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link FilmCategory#getFilmId()}. The order of the Entities are
     * undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link FilmCategory} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link FilmCategory#getFilmId()}
     */
    Stream<FilmCategory> findFilmCategoriesByFilmId();
    
    /**
     * Creates and returns a {@link Stream} of all {@link Inventory} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link Inventory#getFilmId()}. The order of the Entities are
     * undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Inventory} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Inventory#getFilmId()}
     */
    Stream<Inventory> findInventoriesByFilmId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Inventory} Entities that references this Entity by a foreign key. The
     * order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Inventory}
     * Entities that references this Entity by a foreign key
     */
    Stream<Inventory> findInventories();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * FilmCategory} Entities that references this Entity by a foreign key. The
     * order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link FilmCategory}
     * Entities that references this Entity by a foreign key
     */
    Stream<FilmCategory> findFilmCategories();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * FilmActor} Entities that references this Entity by a foreign key. The
     * order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link FilmActor}
     * Entities that references this Entity by a foreign key
     */
    Stream<FilmActor> findFilmActors();
    
    enum Identifier implements FieldIdentifier<Film> {
        
        FILM_ID ("film_id"),
        TITLE ("title"),
        DESCRIPTION ("description"),
        RELEASE_YEAR ("release_year"),
        LANGUAGE_ID ("language_id"),
        ORIGINAL_LANGUAGE_ID ("original_language_id"),
        RENTAL_DURATION ("rental_duration"),
        RENTAL_RATE ("rental_rate"),
        LENGTH ("length"),
        REPLACEMENT_COST ("replacement_cost"),
        RATING ("rating"),
        SPECIAL_FEATURES ("special_features"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "film";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}