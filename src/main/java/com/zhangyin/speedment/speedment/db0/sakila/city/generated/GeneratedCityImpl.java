package com.zhangyin.speedment.speedment.db0.sakila.city.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.city.City;
import com.zhangyin.speedment.speedment.db0.sakila.city.CityImpl;
import com.zhangyin.speedment.speedment.db0.sakila.country.Country;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.city.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedCityImpl extends AbstractBaseEntity<City> implements City {
    
    private Short cityId;
    private String city;
    private Short countryId;
    private Timestamp lastUpdate;
    
    protected GeneratedCityImpl() {
        
    }
    
    @Override
    public Country findCountryId() {
        return managerOf_(Country.class).findAny(Country.COUNTRY_ID, getCountryId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Country is set to " + getCountryId()
                ));
            
    }
    
    @Override
    public Short getCityId() {
        return cityId;
    }
    
    @Override
    public String getCity() {
        return city;
    }
    
    @Override
    public Short getCountryId() {
        return countryId;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final City setCityId(Short cityId) {
        this.cityId = cityId;
        return this;
    }
    
    @Override
    public final City setCity(String city) {
        this.city = city;
        return this;
    }
    
    @Override
    public final City setCountryId(Short countryId) {
        this.countryId = countryId;
        return this;
    }
    
    @Override
    public final City setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<Address> findAddressesByCityId() {
        return managerOf_(Address.class)
                .stream().filter(Address.CITY_ID.equal(this.getCityId()));
    }
    
    @Override
    public Stream<Address> findAddresses() {
        return findAddressesByCityId();
    }
    
    @Override
    public City copy() {
        final City city = new CityImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedCityImpl.this.speedment();
            }
        };
        
        setCityId(city.getCityId());
        setCity(city.getCity());
        setCountryId(city.getCountryId());
        setLastUpdate(city.getLastUpdate());
        
        return city;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("cityId = "+Objects.toString(getCityId()));
        sj.add("city = "+Objects.toString(getCity()));
        sj.add("countryId = "+Objects.toString(getCountryId()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "CityImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof City)) { return false; }
        final City thatCity = (City)that;
        if (!Objects.equals(this.getCityId(), thatCity.getCityId())) {return false; }
        if (!Objects.equals(this.getCity(), thatCity.getCity())) {return false; }
        if (!Objects.equals(this.getCountryId(), thatCity.getCountryId())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatCity.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getCityId());
        hash = 31 * hash + Objects.hashCode(getCity());
        hash = 31 * hash + Objects.hashCode(getCountryId());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<City> entityClass() {
        return City.class;
    }
}