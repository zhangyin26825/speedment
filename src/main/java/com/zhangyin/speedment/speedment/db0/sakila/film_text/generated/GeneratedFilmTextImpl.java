package com.zhangyin.speedment.speedment.db0.sakila.film_text.generated;

import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.film_text.FilmText;
import com.zhangyin.speedment.speedment.db0.sakila.film_text.FilmTextImpl;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.film_text.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedFilmTextImpl extends AbstractBaseEntity<FilmText> implements FilmText {
    
    private Short filmId;
    private String title;
    private String description;
    
    protected GeneratedFilmTextImpl() {
        
    }
    
    @Override
    public Short getFilmId() {
        return filmId;
    }
    
    @Override
    public String getTitle() {
        return title;
    }
    
    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }
    
    @Override
    public final FilmText setFilmId(Short filmId) {
        this.filmId = filmId;
        return this;
    }
    
    @Override
    public final FilmText setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public final FilmText setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public FilmText copy() {
        final FilmText filmText = new FilmTextImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedFilmTextImpl.this.speedment();
            }
        };
        
        setFilmId(filmText.getFilmId());
        setTitle(filmText.getTitle());
        filmText.getDescription().ifPresent(this::setDescription);
        
        return filmText;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("filmId = "+Objects.toString(getFilmId()));
        sj.add("title = "+Objects.toString(getTitle()));
        sj.add("description = "+Objects.toString(getDescription().orElse(null)));
        return "FilmTextImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof FilmText)) { return false; }
        final FilmText thatFilmText = (FilmText)that;
        if (!Objects.equals(this.getFilmId(), thatFilmText.getFilmId())) {return false; }
        if (!Objects.equals(this.getTitle(), thatFilmText.getTitle())) {return false; }
        if (!Objects.equals(this.getDescription(), thatFilmText.getDescription())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getFilmId());
        hash = 31 * hash + Objects.hashCode(getTitle());
        hash = 31 * hash + Objects.hashCode(getDescription());
        return hash;
    }
    
    @Override
    public Class<FilmText> entityClass() {
        return FilmText.class;
    }
}