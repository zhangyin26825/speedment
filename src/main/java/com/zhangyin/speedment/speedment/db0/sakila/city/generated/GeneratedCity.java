package com.zhangyin.speedment.speedment.db0.sakila.city.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.city.City;
import com.zhangyin.speedment.speedment.db0.sakila.country.Country;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.city.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedCity extends Entity<City> {
    
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getCityId()} method.
     */
    final ComparableField<City, Short, Short> CITY_ID = new ComparableFieldImpl<>(Identifier.CITY_ID, City::getCityId, City::setCityId, new ShortIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getCity()} method.
     */
    final StringField<City, String> CITY = new StringFieldImpl<>(Identifier.CITY, City::getCity, City::setCity, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getCountryId()} method.
     */
    final ComparableForeignKeyField<City, Short, Short, Country> COUNTRY_ID = new ComparableForeignKeyFieldImpl<>(Identifier.COUNTRY_ID, City::getCountryId, City::setCountryId, City::findCountryId, new ShortIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link City} field that can be obtained
     * using the {@link City#getLastUpdate()} method.
     */
    final ComparableField<City, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, City::getLastUpdate, City::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Country} referenced by the
     * field that can be obtained using {@link City#getCountryId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N City entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Country} referenced by the field
     * that can be obtained using {@link City#getCountryId()}
     */
    Country findCountryId();
    
    /**
     * Returns the cityId of this City. The cityId field corresponds to the
     * database column db0.sakila.city.city_id.
     * 
     * @return the cityId of this City
     */
    Short getCityId();
    
    /**
     * Returns the city of this City. The city field corresponds to the database
     * column db0.sakila.city.city.
     * 
     * @return the city of this City
     */
    String getCity();
    
    /**
     * Returns the countryId of this City. The countryId field corresponds to the
     * database column db0.sakila.city.country_id.
     * 
     * @return the countryId of this City
     */
    Short getCountryId();
    
    /**
     * Returns the lastUpdate of this City. The lastUpdate field corresponds to
     * the database column db0.sakila.city.last_update.
     * 
     * @return the lastUpdate of this City
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the cityId of this City. The cityId field corresponds to the database
     * column db0.sakila.city.city_id.
     * 
     * @param cityId to set of this City
     * @return this City instance
     */
    City setCityId(Short cityId);
    
    /**
     * Sets the city of this City. The city field corresponds to the database
     * column db0.sakila.city.city.
     * 
     * @param city to set of this City
     * @return this City instance
     */
    City setCity(String city);
    
    /**
     * Sets the countryId of this City. The countryId field corresponds to the
     * database column db0.sakila.city.country_id.
     * 
     * @param countryId to set of this City
     * @return this City instance
     */
    City setCountryId(Short countryId);
    
    /**
     * Sets the lastUpdate of this City. The lastUpdate field corresponds to the
     * database column db0.sakila.city.last_update.
     * 
     * @param lastUpdate to set of this City
     * @return this City instance
     */
    City setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Address} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Address#getCityId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Address} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Address#getCityId()}
     */
    Stream<Address> findAddressesByCityId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Address} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Address} Entities
     * that references this Entity by a foreign key
     */
    Stream<Address> findAddresses();
    
    enum Identifier implements FieldIdentifier<City> {
        
        CITY_ID ("city_id"),
        CITY ("city"),
        COUNTRY_ID ("country_id"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "city";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}