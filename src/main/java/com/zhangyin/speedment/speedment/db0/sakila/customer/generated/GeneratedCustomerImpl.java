package com.zhangyin.speedment.speedment.db0.sakila.customer.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.customer.Customer;
import com.zhangyin.speedment.speedment.db0.sakila.customer.CustomerImpl;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.store.Store;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.customer.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedCustomerImpl extends AbstractBaseEntity<Customer> implements Customer {
    
    private Short customerId;
    private Byte storeId;
    private String firstName;
    private String lastName;
    private String email;
    private Short addressId;
    private Integer active;
    private Timestamp createDate;
    private Timestamp lastUpdate;
    
    protected GeneratedCustomerImpl() {
        
    }
    
    @Override
    public Address findAddressId() {
        return managerOf_(Address.class).findAny(Address.ADDRESS_ID, getAddressId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Address is set to " + getAddressId()
                ));
            
    }
    
    @Override
    public Store findStoreId() {
        return managerOf_(Store.class).findAny(Store.STORE_ID, getStoreId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Store is set to " + getStoreId()
                ));
            
    }
    
    @Override
    public Short getCustomerId() {
        return customerId;
    }
    
    @Override
    public Byte getStoreId() {
        return storeId;
    }
    
    @Override
    public String getFirstName() {
        return firstName;
    }
    
    @Override
    public String getLastName() {
        return lastName;
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Short getAddressId() {
        return addressId;
    }
    
    @Override
    public Integer getActive() {
        return active;
    }
    
    @Override
    public Timestamp getCreateDate() {
        return createDate;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Customer setCustomerId(Short customerId) {
        this.customerId = customerId;
        return this;
    }
    
    @Override
    public final Customer setStoreId(Byte storeId) {
        this.storeId = storeId;
        return this;
    }
    
    @Override
    public final Customer setFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    @Override
    public final Customer setLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public final Customer setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public final Customer setAddressId(Short addressId) {
        this.addressId = addressId;
        return this;
    }
    
    @Override
    public final Customer setActive(Integer active) {
        this.active = active;
        return this;
    }
    
    @Override
    public final Customer setCreateDate(Timestamp createDate) {
        this.createDate = createDate;
        return this;
    }
    
    @Override
    public final Customer setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<Payment> findPaymentsByCustomerId() {
        return managerOf_(Payment.class)
                .stream().filter(Payment.CUSTOMER_ID.equal(this.getCustomerId()));
    }
    
    @Override
    public Stream<Rental> findRentalsByCustomerId() {
        return managerOf_(Rental.class)
                .stream().filter(Rental.CUSTOMER_ID.equal(this.getCustomerId()));
    }
    
    @Override
    public Stream<Payment> findPayments() {
        return findPaymentsByCustomerId();
    }
    
    @Override
    public Stream<Rental> findRentals() {
        return findRentalsByCustomerId();
    }
    
    @Override
    public Customer copy() {
        final Customer customer = new CustomerImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedCustomerImpl.this.speedment();
            }
        };
        
        setCustomerId(customer.getCustomerId());
        setStoreId(customer.getStoreId());
        setFirstName(customer.getFirstName());
        setLastName(customer.getLastName());
        customer.getEmail().ifPresent(this::setEmail);
        setAddressId(customer.getAddressId());
        setActive(customer.getActive());
        setCreateDate(customer.getCreateDate());
        setLastUpdate(customer.getLastUpdate());
        
        return customer;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("customerId = "+Objects.toString(getCustomerId()));
        sj.add("storeId = "+Objects.toString(getStoreId()));
        sj.add("firstName = "+Objects.toString(getFirstName()));
        sj.add("lastName = "+Objects.toString(getLastName()));
        sj.add("email = "+Objects.toString(getEmail().orElse(null)));
        sj.add("addressId = "+Objects.toString(getAddressId()));
        sj.add("active = "+Objects.toString(getActive()));
        sj.add("createDate = "+Objects.toString(getCreateDate()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "CustomerImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Customer)) { return false; }
        final Customer thatCustomer = (Customer)that;
        if (!Objects.equals(this.getCustomerId(), thatCustomer.getCustomerId())) {return false; }
        if (!Objects.equals(this.getStoreId(), thatCustomer.getStoreId())) {return false; }
        if (!Objects.equals(this.getFirstName(), thatCustomer.getFirstName())) {return false; }
        if (!Objects.equals(this.getLastName(), thatCustomer.getLastName())) {return false; }
        if (!Objects.equals(this.getEmail(), thatCustomer.getEmail())) {return false; }
        if (!Objects.equals(this.getAddressId(), thatCustomer.getAddressId())) {return false; }
        if (!Objects.equals(this.getActive(), thatCustomer.getActive())) {return false; }
        if (!Objects.equals(this.getCreateDate(), thatCustomer.getCreateDate())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatCustomer.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getCustomerId());
        hash = 31 * hash + Objects.hashCode(getStoreId());
        hash = 31 * hash + Objects.hashCode(getFirstName());
        hash = 31 * hash + Objects.hashCode(getLastName());
        hash = 31 * hash + Objects.hashCode(getEmail());
        hash = 31 * hash + Objects.hashCode(getAddressId());
        hash = 31 * hash + Objects.hashCode(getActive());
        hash = 31 * hash + Objects.hashCode(getCreateDate());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Customer> entityClass() {
        return Customer.class;
    }
}