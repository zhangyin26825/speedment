package com.zhangyin.speedment.speedment.db0.sakila.film_actor.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple2;
import com.speedment.util.tuple.Tuples;
import com.zhangyin.speedment.speedment.db0.sakila.film_actor.FilmActor;
import com.zhangyin.speedment.speedment.db0.sakila.film_actor.FilmActorImpl;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table speedment.db0.sakila.film_actor.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedFilmActorManagerImpl extends AbstractSqlManager<FilmActor> implements GeneratedFilmActorManager {
    
    private final static Tuple2<Class<Short>, Class<Short>> PRIMARY_KEY_CLASSES = Tuples.of(Short.class, Short.class);
    
    protected GeneratedFilmActorManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected FilmActor newEntityFrom(ResultSet resultSet) throws SpeedmentException, SQLException {
        final FilmActor entity = newEmptyEntity();
        try {
            entity.setActorId(resultSet.getShort(1));
            entity.setFilmId(resultSet.getShort(2));
            entity.setLastUpdate(resultSet.getTimestamp(3));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public FilmActor newEmptyEntity() {
        return new FilmActorImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(FilmActor entity, FieldIdentifier<FilmActor> identifier) {
        switch ((FilmActor.Identifier) identifier) {
            case ACTOR_ID : return entity.getActorId();
            case FILM_ID : return entity.getFilmId();
            case LAST_UPDATE : return entity.getLastUpdate();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(FilmActor entity, FieldIdentifier<FilmActor> identifier, Object value) {
        switch ((FilmActor.Identifier) identifier) {
            case ACTOR_ID : entity.setActorId((Short) value); break;
            case FILM_ID : entity.setFilmId((Short) value); break;
            case LAST_UPDATE : entity.setLastUpdate((Timestamp) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            FilmActor.ACTOR_ID,
            FilmActor.FILM_ID,
            FilmActor.LAST_UPDATE
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            FilmActor.ACTOR_ID,
            FilmActor.FILM_ID
        );
    }
    
    @Override
    public Tuple2<Class<Short>, Class<Short>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
}