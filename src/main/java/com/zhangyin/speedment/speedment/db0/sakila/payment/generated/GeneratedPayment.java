package com.zhangyin.speedment.speedment.db0.sakila.payment.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.BigDecimalIdentityMapper;
import com.speedment.config.db.mapper.identity.ByteIdentityMapper;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.customer.Customer;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.staff.Staff;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.payment.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedPayment extends Entity<Payment> {
    
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getPaymentId()} method.
     */
    final ComparableField<Payment, Short, Short> PAYMENT_ID = new ComparableFieldImpl<>(Identifier.PAYMENT_ID, Payment::getPaymentId, Payment::setPaymentId, new ShortIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getCustomerId()} method.
     */
    final ComparableForeignKeyField<Payment, Short, Short, Customer> CUSTOMER_ID = new ComparableForeignKeyFieldImpl<>(Identifier.CUSTOMER_ID, Payment::getCustomerId, Payment::setCustomerId, Payment::findCustomerId, new ShortIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getStaffId()} method.
     */
    final ComparableForeignKeyField<Payment, Byte, Byte, Staff> STAFF_ID = new ComparableForeignKeyFieldImpl<>(Identifier.STAFF_ID, Payment::getStaffId, Payment::setStaffId, Payment::findStaffId, new ByteIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getRentalId()} method.
     */
    final ComparableForeignKeyField<Payment, Integer, Integer, Rental> RENTAL_ID = new ComparableForeignKeyFieldImpl<>(Identifier.RENTAL_ID, o -> o.getRentalId().orElse(null), Payment::setRentalId, fk -> fk.findRentalId().orElse(null), new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getAmount()} method.
     */
    final ComparableField<Payment, BigDecimal, BigDecimal> AMOUNT = new ComparableFieldImpl<>(Identifier.AMOUNT, Payment::getAmount, Payment::setAmount, new BigDecimalIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getPaymentDate()} method.
     */
    final ComparableField<Payment, Timestamp, Timestamp> PAYMENT_DATE = new ComparableFieldImpl<>(Identifier.PAYMENT_DATE, Payment::getPaymentDate, Payment::setPaymentDate, new TimestampIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getLastUpdate()} method.
     */
    final ComparableField<Payment, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, Payment::getLastUpdate, Payment::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Customer} referenced by
     * the field that can be obtained using {@link Payment#getCustomerId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Payment entities
     * and call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Customer} referenced by the field
     * that can be obtained using {@link Payment#getCustomerId()}
     */
    Customer findCustomerId();
    
    /**
     * Finds and returns the foreign key Entity {@link Rental} referenced by the
     * field that can be obtained using {@link Payment#getRentalId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Payment entities
     * and call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Rental} referenced by the field that
     * can be obtained using {@link Payment#getRentalId()}
     */
    Optional<Rental> findRentalId();
    
    /**
     * Finds and returns the foreign key Entity {@link Staff} referenced by the
     * field that can be obtained using {@link Payment#getStaffId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Payment entities
     * and call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Staff} referenced by the field that
     * can be obtained using {@link Payment#getStaffId()}
     */
    Staff findStaffId();
    
    /**
     * Returns the paymentId of this Payment. The paymentId field corresponds to
     * the database column db0.sakila.payment.payment_id.
     * 
     * @return the paymentId of this Payment
     */
    Short getPaymentId();
    
    /**
     * Returns the customerId of this Payment. The customerId field corresponds
     * to the database column db0.sakila.payment.customer_id.
     * 
     * @return the customerId of this Payment
     */
    Short getCustomerId();
    
    /**
     * Returns the staffId of this Payment. The staffId field corresponds to the
     * database column db0.sakila.payment.staff_id.
     * 
     * @return the staffId of this Payment
     */
    Byte getStaffId();
    
    /**
     * Returns the rentalId of this Payment. The rentalId field corresponds to
     * the database column db0.sakila.payment.rental_id.
     * 
     * @return the rentalId of this Payment
     */
    Optional<Integer> getRentalId();
    
    /**
     * Returns the amount of this Payment. The amount field corresponds to the
     * database column db0.sakila.payment.amount.
     * 
     * @return the amount of this Payment
     */
    BigDecimal getAmount();
    
    /**
     * Returns the paymentDate of this Payment. The paymentDate field corresponds
     * to the database column db0.sakila.payment.payment_date.
     * 
     * @return the paymentDate of this Payment
     */
    Timestamp getPaymentDate();
    
    /**
     * Returns the lastUpdate of this Payment. The lastUpdate field corresponds
     * to the database column db0.sakila.payment.last_update.
     * 
     * @return the lastUpdate of this Payment
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the paymentId of this Payment. The paymentId field corresponds to the
     * database column db0.sakila.payment.payment_id.
     * 
     * @param paymentId to set of this Payment
     * @return this Payment instance
     */
    Payment setPaymentId(Short paymentId);
    
    /**
     * Sets the customerId of this Payment. The customerId field corresponds to
     * the database column db0.sakila.payment.customer_id.
     * 
     * @param customerId to set of this Payment
     * @return this Payment instance
     */
    Payment setCustomerId(Short customerId);
    
    /**
     * Sets the staffId of this Payment. The staffId field corresponds to the
     * database column db0.sakila.payment.staff_id.
     * 
     * @param staffId to set of this Payment
     * @return this Payment instance
     */
    Payment setStaffId(Byte staffId);
    
    /**
     * Sets the rentalId of this Payment. The rentalId field corresponds to the
     * database column db0.sakila.payment.rental_id.
     * 
     * @param rentalId to set of this Payment
     * @return this Payment instance
     */
    Payment setRentalId(Integer rentalId);
    
    /**
     * Sets the amount of this Payment. The amount field corresponds to the
     * database column db0.sakila.payment.amount.
     * 
     * @param amount to set of this Payment
     * @return this Payment instance
     */
    Payment setAmount(BigDecimal amount);
    
    /**
     * Sets the paymentDate of this Payment. The paymentDate field corresponds to
     * the database column db0.sakila.payment.payment_date.
     * 
     * @param paymentDate to set of this Payment
     * @return this Payment instance
     */
    Payment setPaymentDate(Timestamp paymentDate);
    
    /**
     * Sets the lastUpdate of this Payment. The lastUpdate field corresponds to
     * the database column db0.sakila.payment.last_update.
     * 
     * @param lastUpdate to set of this Payment
     * @return this Payment instance
     */
    Payment setLastUpdate(Timestamp lastUpdate);
    
    enum Identifier implements FieldIdentifier<Payment> {
        
        PAYMENT_ID ("payment_id"),
        CUSTOMER_ID ("customer_id"),
        STAFF_ID ("staff_id"),
        RENTAL_ID ("rental_id"),
        AMOUNT ("amount"),
        PAYMENT_DATE ("payment_date"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "payment";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}