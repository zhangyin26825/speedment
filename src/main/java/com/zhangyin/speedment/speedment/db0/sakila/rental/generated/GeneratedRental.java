package com.zhangyin.speedment.speedment.db0.sakila.rental.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.ByteIdentityMapper;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.customer.Customer;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.Inventory;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.staff.Staff;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.rental.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedRental extends Entity<Rental> {
    
    /**
     * This Field corresponds to the {@link Rental} field that can be obtained
     * using the {@link Rental#getRentalId()} method.
     */
    final ComparableField<Rental, Integer, Integer> RENTAL_ID = new ComparableFieldImpl<>(Identifier.RENTAL_ID, Rental::getRentalId, Rental::setRentalId, new IntegerIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Rental} field that can be obtained
     * using the {@link Rental#getRentalDate()} method.
     */
    final ComparableField<Rental, Timestamp, Timestamp> RENTAL_DATE = new ComparableFieldImpl<>(Identifier.RENTAL_DATE, Rental::getRentalDate, Rental::setRentalDate, new TimestampIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Rental} field that can be obtained
     * using the {@link Rental#getInventoryId()} method.
     */
    final ComparableForeignKeyField<Rental, Integer, Integer, Inventory> INVENTORY_ID = new ComparableForeignKeyFieldImpl<>(Identifier.INVENTORY_ID, Rental::getInventoryId, Rental::setInventoryId, Rental::findInventoryId, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Rental} field that can be obtained
     * using the {@link Rental#getCustomerId()} method.
     */
    final ComparableForeignKeyField<Rental, Short, Short, Customer> CUSTOMER_ID = new ComparableForeignKeyFieldImpl<>(Identifier.CUSTOMER_ID, Rental::getCustomerId, Rental::setCustomerId, Rental::findCustomerId, new ShortIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Rental} field that can be obtained
     * using the {@link Rental#getReturnDate()} method.
     */
    final ComparableField<Rental, Timestamp, Timestamp> RETURN_DATE = new ComparableFieldImpl<>(Identifier.RETURN_DATE, o -> o.getReturnDate().orElse(null), Rental::setReturnDate, new TimestampIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Rental} field that can be obtained
     * using the {@link Rental#getStaffId()} method.
     */
    final ComparableForeignKeyField<Rental, Byte, Byte, Staff> STAFF_ID = new ComparableForeignKeyFieldImpl<>(Identifier.STAFF_ID, Rental::getStaffId, Rental::setStaffId, Rental::findStaffId, new ByteIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Rental} field that can be obtained
     * using the {@link Rental#getLastUpdate()} method.
     */
    final ComparableField<Rental, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, Rental::getLastUpdate, Rental::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Customer} referenced by
     * the field that can be obtained using {@link Rental#getCustomerId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Rental entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Customer} referenced by the field
     * that can be obtained using {@link Rental#getCustomerId()}
     */
    Customer findCustomerId();
    
    /**
     * Finds and returns the foreign key Entity {@link Inventory} referenced by
     * the field that can be obtained using {@link Rental#getInventoryId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Rental entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Inventory} referenced by the field
     * that can be obtained using {@link Rental#getInventoryId()}
     */
    Inventory findInventoryId();
    
    /**
     * Finds and returns the foreign key Entity {@link Staff} referenced by the
     * field that can be obtained using {@link Rental#getStaffId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Rental entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Staff} referenced by the field that
     * can be obtained using {@link Rental#getStaffId()}
     */
    Staff findStaffId();
    
    /**
     * Returns the rentalId of this Rental. The rentalId field corresponds to the
     * database column db0.sakila.rental.rental_id.
     * 
     * @return the rentalId of this Rental
     */
    Integer getRentalId();
    
    /**
     * Returns the rentalDate of this Rental. The rentalDate field corresponds to
     * the database column db0.sakila.rental.rental_date.
     * 
     * @return the rentalDate of this Rental
     */
    Timestamp getRentalDate();
    
    /**
     * Returns the inventoryId of this Rental. The inventoryId field corresponds
     * to the database column db0.sakila.rental.inventory_id.
     * 
     * @return the inventoryId of this Rental
     */
    Integer getInventoryId();
    
    /**
     * Returns the customerId of this Rental. The customerId field corresponds to
     * the database column db0.sakila.rental.customer_id.
     * 
     * @return the customerId of this Rental
     */
    Short getCustomerId();
    
    /**
     * Returns the returnDate of this Rental. The returnDate field corresponds to
     * the database column db0.sakila.rental.return_date.
     * 
     * @return the returnDate of this Rental
     */
    Optional<Timestamp> getReturnDate();
    
    /**
     * Returns the staffId of this Rental. The staffId field corresponds to the
     * database column db0.sakila.rental.staff_id.
     * 
     * @return the staffId of this Rental
     */
    Byte getStaffId();
    
    /**
     * Returns the lastUpdate of this Rental. The lastUpdate field corresponds to
     * the database column db0.sakila.rental.last_update.
     * 
     * @return the lastUpdate of this Rental
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the rentalId of this Rental. The rentalId field corresponds to the
     * database column db0.sakila.rental.rental_id.
     * 
     * @param rentalId to set of this Rental
     * @return this Rental instance
     */
    Rental setRentalId(Integer rentalId);
    
    /**
     * Sets the rentalDate of this Rental. The rentalDate field corresponds to
     * the database column db0.sakila.rental.rental_date.
     * 
     * @param rentalDate to set of this Rental
     * @return this Rental instance
     */
    Rental setRentalDate(Timestamp rentalDate);
    
    /**
     * Sets the inventoryId of this Rental. The inventoryId field corresponds to
     * the database column db0.sakila.rental.inventory_id.
     * 
     * @param inventoryId to set of this Rental
     * @return this Rental instance
     */
    Rental setInventoryId(Integer inventoryId);
    
    /**
     * Sets the customerId of this Rental. The customerId field corresponds to
     * the database column db0.sakila.rental.customer_id.
     * 
     * @param customerId to set of this Rental
     * @return this Rental instance
     */
    Rental setCustomerId(Short customerId);
    
    /**
     * Sets the returnDate of this Rental. The returnDate field corresponds to
     * the database column db0.sakila.rental.return_date.
     * 
     * @param returnDate to set of this Rental
     * @return this Rental instance
     */
    Rental setReturnDate(Timestamp returnDate);
    
    /**
     * Sets the staffId of this Rental. The staffId field corresponds to the
     * database column db0.sakila.rental.staff_id.
     * 
     * @param staffId to set of this Rental
     * @return this Rental instance
     */
    Rental setStaffId(Byte staffId);
    
    /**
     * Sets the lastUpdate of this Rental. The lastUpdate field corresponds to
     * the database column db0.sakila.rental.last_update.
     * 
     * @param lastUpdate to set of this Rental
     * @return this Rental instance
     */
    Rental setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Payment} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Payment#getRentalId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Payment} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Payment#getRentalId()}
     */
    Stream<Payment> findPaymentsByRentalId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Payment} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Payment} Entities
     * that references this Entity by a foreign key
     */
    Stream<Payment> findPayments();
    
    enum Identifier implements FieldIdentifier<Rental> {
        
        RENTAL_ID ("rental_id"),
        RENTAL_DATE ("rental_date"),
        INVENTORY_ID ("inventory_id"),
        CUSTOMER_ID ("customer_id"),
        RETURN_DATE ("return_date"),
        STAFF_ID ("staff_id"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "rental";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}