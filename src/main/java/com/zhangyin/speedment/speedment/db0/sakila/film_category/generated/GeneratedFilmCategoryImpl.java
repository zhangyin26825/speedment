package com.zhangyin.speedment.speedment.db0.sakila.film_category.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.category.Category;
import com.zhangyin.speedment.speedment.db0.sakila.film.Film;
import com.zhangyin.speedment.speedment.db0.sakila.film_category.FilmCategory;
import com.zhangyin.speedment.speedment.db0.sakila.film_category.FilmCategoryImpl;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.film_category.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedFilmCategoryImpl extends AbstractBaseEntity<FilmCategory> implements FilmCategory {
    
    private Short filmId;
    private Byte categoryId;
    private Timestamp lastUpdate;
    
    protected GeneratedFilmCategoryImpl() {
        
    }
    
    @Override
    public Category findCategoryId() {
        return managerOf_(Category.class).findAny(Category.CATEGORY_ID, getCategoryId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Category is set to " + getCategoryId()
                ));
            
    }
    
    @Override
    public Film findFilmId() {
        return managerOf_(Film.class).findAny(Film.FILM_ID, getFilmId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Film is set to " + getFilmId()
                ));
            
    }
    
    @Override
    public Short getFilmId() {
        return filmId;
    }
    
    @Override
    public Byte getCategoryId() {
        return categoryId;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final FilmCategory setFilmId(Short filmId) {
        this.filmId = filmId;
        return this;
    }
    
    @Override
    public final FilmCategory setCategoryId(Byte categoryId) {
        this.categoryId = categoryId;
        return this;
    }
    
    @Override
    public final FilmCategory setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public FilmCategory copy() {
        final FilmCategory filmCategory = new FilmCategoryImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedFilmCategoryImpl.this.speedment();
            }
        };
        
        setFilmId(filmCategory.getFilmId());
        setCategoryId(filmCategory.getCategoryId());
        setLastUpdate(filmCategory.getLastUpdate());
        
        return filmCategory;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("filmId = "+Objects.toString(getFilmId()));
        sj.add("categoryId = "+Objects.toString(getCategoryId()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "FilmCategoryImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof FilmCategory)) { return false; }
        final FilmCategory thatFilmCategory = (FilmCategory)that;
        if (!Objects.equals(this.getFilmId(), thatFilmCategory.getFilmId())) {return false; }
        if (!Objects.equals(this.getCategoryId(), thatFilmCategory.getCategoryId())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatFilmCategory.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getFilmId());
        hash = 31 * hash + Objects.hashCode(getCategoryId());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<FilmCategory> entityClass() {
        return FilmCategory.class;
    }
}