package com.zhangyin.speedment.speedment.db0.sakila.actor.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.actor.Actor;
import com.zhangyin.speedment.speedment.db0.sakila.film_actor.FilmActor;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.actor.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedActor extends Entity<Actor> {
    
    /**
     * This Field corresponds to the {@link Actor} field that can be obtained
     * using the {@link Actor#getActorId()} method.
     */
    final ComparableField<Actor, Short, Short> ACTOR_ID = new ComparableFieldImpl<>(Identifier.ACTOR_ID, Actor::getActorId, Actor::setActorId, new ShortIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Actor} field that can be obtained
     * using the {@link Actor#getFirstName()} method.
     */
    final StringField<Actor, String> FIRST_NAME = new StringFieldImpl<>(Identifier.FIRST_NAME, Actor::getFirstName, Actor::setFirstName, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Actor} field that can be obtained
     * using the {@link Actor#getLastName()} method.
     */
    final StringField<Actor, String> LAST_NAME = new StringFieldImpl<>(Identifier.LAST_NAME, Actor::getLastName, Actor::setLastName, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Actor} field that can be obtained
     * using the {@link Actor#getLastUpdate()} method.
     */
    final ComparableField<Actor, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, Actor::getLastUpdate, Actor::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Returns the actorId of this Actor. The actorId field corresponds to the
     * database column db0.sakila.actor.actor_id.
     * 
     * @return the actorId of this Actor
     */
    Short getActorId();
    
    /**
     * Returns the firstName of this Actor. The firstName field corresponds to
     * the database column db0.sakila.actor.first_name.
     * 
     * @return the firstName of this Actor
     */
    String getFirstName();
    
    /**
     * Returns the lastName of this Actor. The lastName field corresponds to the
     * database column db0.sakila.actor.last_name.
     * 
     * @return the lastName of this Actor
     */
    String getLastName();
    
    /**
     * Returns the lastUpdate of this Actor. The lastUpdate field corresponds to
     * the database column db0.sakila.actor.last_update.
     * 
     * @return the lastUpdate of this Actor
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the actorId of this Actor. The actorId field corresponds to the
     * database column db0.sakila.actor.actor_id.
     * 
     * @param actorId to set of this Actor
     * @return this Actor instance
     */
    Actor setActorId(Short actorId);
    
    /**
     * Sets the firstName of this Actor. The firstName field corresponds to the
     * database column db0.sakila.actor.first_name.
     * 
     * @param firstName to set of this Actor
     * @return this Actor instance
     */
    Actor setFirstName(String firstName);
    
    /**
     * Sets the lastName of this Actor. The lastName field corresponds to the
     * database column db0.sakila.actor.last_name.
     * 
     * @param lastName to set of this Actor
     * @return this Actor instance
     */
    Actor setLastName(String lastName);
    
    /**
     * Sets the lastUpdate of this Actor. The lastUpdate field corresponds to the
     * database column db0.sakila.actor.last_update.
     * 
     * @param lastUpdate to set of this Actor
     * @return this Actor instance
     */
    Actor setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link FilmActor} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link FilmActor#getActorId()}. The order of the Entities are
     * undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link FilmActor} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * FilmActor#getActorId()}
     */
    Stream<FilmActor> findFilmActorsByActorId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * FilmActor} Entities that references this Entity by a foreign key. The
     * order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link FilmActor}
     * Entities that references this Entity by a foreign key
     */
    Stream<FilmActor> findFilmActors();
    
    enum Identifier implements FieldIdentifier<Actor> {
        
        ACTOR_ID ("actor_id"),
        FIRST_NAME ("first_name"),
        LAST_NAME ("last_name"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "actor";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}