package com.zhangyin.speedment.speedment.db0.sakila.country.generated;

import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.city.City;
import com.zhangyin.speedment.speedment.db0.sakila.country.Country;
import com.zhangyin.speedment.speedment.db0.sakila.country.CountryImpl;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.country.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedCountryImpl extends AbstractBaseEntity<Country> implements Country {
    
    private Short countryId;
    private String country;
    private Timestamp lastUpdate;
    
    protected GeneratedCountryImpl() {
        
    }
    
    @Override
    public Short getCountryId() {
        return countryId;
    }
    
    @Override
    public String getCountry() {
        return country;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Country setCountryId(Short countryId) {
        this.countryId = countryId;
        return this;
    }
    
    @Override
    public final Country setCountry(String country) {
        this.country = country;
        return this;
    }
    
    @Override
    public final Country setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<City> findCitiesByCountryId() {
        return managerOf_(City.class)
                .stream().filter(City.COUNTRY_ID.equal(this.getCountryId()));
    }
    
    @Override
    public Stream<City> findCities() {
        return findCitiesByCountryId();
    }
    
    @Override
    public Country copy() {
        final Country country = new CountryImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedCountryImpl.this.speedment();
            }
        };
        
        setCountryId(country.getCountryId());
        setCountry(country.getCountry());
        setLastUpdate(country.getLastUpdate());
        
        return country;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("countryId = "+Objects.toString(getCountryId()));
        sj.add("country = "+Objects.toString(getCountry()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "CountryImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Country)) { return false; }
        final Country thatCountry = (Country)that;
        if (!Objects.equals(this.getCountryId(), thatCountry.getCountryId())) {return false; }
        if (!Objects.equals(this.getCountry(), thatCountry.getCountry())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatCountry.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getCountryId());
        hash = 31 * hash + Objects.hashCode(getCountry());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Country> entityClass() {
        return Country.class;
    }
}