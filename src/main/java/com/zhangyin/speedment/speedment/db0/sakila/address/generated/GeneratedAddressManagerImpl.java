package com.zhangyin.speedment.speedment.db0.sakila.address.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.address.AddressImpl;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table speedment.db0.sakila.address.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedAddressManagerImpl extends AbstractSqlManager<Address> implements GeneratedAddressManager {
    
    private final static Tuple1<Class<Short>> PRIMARY_KEY_CLASSES = Tuples.of(Short.class);
    
    protected GeneratedAddressManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected Address newEntityFrom(ResultSet resultSet) throws SpeedmentException, SQLException {
        final Address entity = newEmptyEntity();
        try {
            entity.setAddressId(resultSet.getShort(1));
            entity.setAddress(resultSet.getString(2));
            entity.setAddress2(resultSet.getString(3));
            entity.setDistrict(resultSet.getString(4));
            entity.setCityId(resultSet.getShort(5));
            entity.setPostalCode(resultSet.getString(6));
            entity.setPhone(resultSet.getString(7));
            entity.setLocation(resultSet.getObject(8));
            entity.setLastUpdate(resultSet.getTimestamp(9));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Address newEmptyEntity() {
        return new AddressImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(Address entity, FieldIdentifier<Address> identifier) {
        switch ((Address.Identifier) identifier) {
            case ADDRESS_ID : return entity.getAddressId();
            case ADDRESS : return entity.getAddress();
            case ADDRESS2 : return entity.getAddress2().orElse(null);
            case DISTRICT : return entity.getDistrict();
            case CITY_ID : return entity.getCityId();
            case POSTAL_CODE : return entity.getPostalCode().orElse(null);
            case PHONE : return entity.getPhone();
            case LOCATION : return entity.getLocation();
            case LAST_UPDATE : return entity.getLastUpdate();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(Address entity, FieldIdentifier<Address> identifier, Object value) {
        switch ((Address.Identifier) identifier) {
            case ADDRESS_ID : entity.setAddressId((Short) value); break;
            case ADDRESS : entity.setAddress((String) value); break;
            case ADDRESS2 : entity.setAddress2((String) value); break;
            case DISTRICT : entity.setDistrict((String) value); break;
            case CITY_ID : entity.setCityId((Short) value); break;
            case POSTAL_CODE : entity.setPostalCode((String) value); break;
            case PHONE : entity.setPhone((String) value); break;
            case LOCATION : entity.setLocation(value); break;
            case LAST_UPDATE : entity.setLastUpdate((Timestamp) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            Address.ADDRESS_ID,
            Address.ADDRESS,
            Address.ADDRESS2,
            Address.DISTRICT,
            Address.CITY_ID,
            Address.POSTAL_CODE,
            Address.PHONE,
            Address.LOCATION,
            Address.LAST_UPDATE
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            Address.ADDRESS_ID
        );
    }
    
    @Override
    public Tuple1<Class<Short>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
}