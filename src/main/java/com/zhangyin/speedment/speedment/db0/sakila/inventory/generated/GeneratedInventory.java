package com.zhangyin.speedment.speedment.db0.sakila.inventory.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.ByteIdentityMapper;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.film.Film;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.Inventory;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.store.Store;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.inventory.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedInventory extends Entity<Inventory> {
    
    /**
     * This Field corresponds to the {@link Inventory} field that can be obtained
     * using the {@link Inventory#getInventoryId()} method.
     */
    final ComparableField<Inventory, Integer, Integer> INVENTORY_ID = new ComparableFieldImpl<>(Identifier.INVENTORY_ID, Inventory::getInventoryId, Inventory::setInventoryId, new IntegerIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Inventory} field that can be obtained
     * using the {@link Inventory#getFilmId()} method.
     */
    final ComparableForeignKeyField<Inventory, Short, Short, Film> FILM_ID = new ComparableForeignKeyFieldImpl<>(Identifier.FILM_ID, Inventory::getFilmId, Inventory::setFilmId, Inventory::findFilmId, new ShortIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Inventory} field that can be obtained
     * using the {@link Inventory#getStoreId()} method.
     */
    final ComparableForeignKeyField<Inventory, Byte, Byte, Store> STORE_ID = new ComparableForeignKeyFieldImpl<>(Identifier.STORE_ID, Inventory::getStoreId, Inventory::setStoreId, Inventory::findStoreId, new ByteIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Inventory} field that can be obtained
     * using the {@link Inventory#getLastUpdate()} method.
     */
    final ComparableField<Inventory, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, Inventory::getLastUpdate, Inventory::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Film} referenced by the
     * field that can be obtained using {@link Inventory#getFilmId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Inventory entities
     * and call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Film} referenced by the field that
     * can be obtained using {@link Inventory#getFilmId()}
     */
    Film findFilmId();
    
    /**
     * Finds and returns the foreign key Entity {@link Store} referenced by the
     * field that can be obtained using {@link Inventory#getStoreId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Inventory entities
     * and call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Store} referenced by the field that
     * can be obtained using {@link Inventory#getStoreId()}
     */
    Store findStoreId();
    
    /**
     * Returns the inventoryId of this Inventory. The inventoryId field
     * corresponds to the database column db0.sakila.inventory.inventory_id.
     * 
     * @return the inventoryId of this Inventory
     */
    Integer getInventoryId();
    
    /**
     * Returns the filmId of this Inventory. The filmId field corresponds to the
     * database column db0.sakila.inventory.film_id.
     * 
     * @return the filmId of this Inventory
     */
    Short getFilmId();
    
    /**
     * Returns the storeId of this Inventory. The storeId field corresponds to
     * the database column db0.sakila.inventory.store_id.
     * 
     * @return the storeId of this Inventory
     */
    Byte getStoreId();
    
    /**
     * Returns the lastUpdate of this Inventory. The lastUpdate field corresponds
     * to the database column db0.sakila.inventory.last_update.
     * 
     * @return the lastUpdate of this Inventory
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the inventoryId of this Inventory. The inventoryId field corresponds
     * to the database column db0.sakila.inventory.inventory_id.
     * 
     * @param inventoryId to set of this Inventory
     * @return this Inventory instance
     */
    Inventory setInventoryId(Integer inventoryId);
    
    /**
     * Sets the filmId of this Inventory. The filmId field corresponds to the
     * database column db0.sakila.inventory.film_id.
     * 
     * @param filmId to set of this Inventory
     * @return this Inventory instance
     */
    Inventory setFilmId(Short filmId);
    
    /**
     * Sets the storeId of this Inventory. The storeId field corresponds to the
     * database column db0.sakila.inventory.store_id.
     * 
     * @param storeId to set of this Inventory
     * @return this Inventory instance
     */
    Inventory setStoreId(Byte storeId);
    
    /**
     * Sets the lastUpdate of this Inventory. The lastUpdate field corresponds to
     * the database column db0.sakila.inventory.last_update.
     * 
     * @param lastUpdate to set of this Inventory
     * @return this Inventory instance
     */
    Inventory setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Rental} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Rental#getInventoryId()}. The order of the Entities are undefined
     * and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Rental} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Rental#getInventoryId()}
     */
    Stream<Rental> findRentalsByInventoryId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Rental} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Rental} Entities
     * that references this Entity by a foreign key
     */
    Stream<Rental> findRentals();
    
    enum Identifier implements FieldIdentifier<Inventory> {
        
        INVENTORY_ID ("inventory_id"),
        FILM_ID ("film_id"),
        STORE_ID ("store_id"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "inventory";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}