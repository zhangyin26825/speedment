package com.zhangyin.speedment.speedment.db0.sakila.language.generated;

import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.film.Film;
import com.zhangyin.speedment.speedment.db0.sakila.language.Language;
import com.zhangyin.speedment.speedment.db0.sakila.language.LanguageImpl;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Function;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.language.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedLanguageImpl extends AbstractBaseEntity<Language> implements Language {
    
    private Byte languageId;
    private String name;
    private Timestamp lastUpdate;
    
    protected GeneratedLanguageImpl() {
        
    }
    
    @Override
    public Byte getLanguageId() {
        return languageId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Language setLanguageId(Byte languageId) {
        this.languageId = languageId;
        return this;
    }
    
    @Override
    public final Language setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public final Language setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<Film> findFilmsByLanguageId() {
        return managerOf_(Film.class)
                .stream().filter(Film.LANGUAGE_ID.equal(this.getLanguageId()));
    }
    
    @Override
    public Stream<Film> findFilmsByOriginalLanguageId() {
        return managerOf_(Film.class)
                .stream().filter(Film.ORIGINAL_LANGUAGE_ID.equal(this.getLanguageId()));
    }
    
    @Override
    public Stream<Film> findFilms() {
        return Stream.of(findFilmsByLanguageId(), findFilmsByOriginalLanguageId()).flatMap(Function.identity()).distinct();
    }
    
    @Override
    public Language copy() {
        final Language language = new LanguageImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedLanguageImpl.this.speedment();
            }
        };
        
        setLanguageId(language.getLanguageId());
        setName(language.getName());
        setLastUpdate(language.getLastUpdate());
        
        return language;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("languageId = "+Objects.toString(getLanguageId()));
        sj.add("name = "+Objects.toString(getName()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "LanguageImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Language)) { return false; }
        final Language thatLanguage = (Language)that;
        if (!Objects.equals(this.getLanguageId(), thatLanguage.getLanguageId())) {return false; }
        if (!Objects.equals(this.getName(), thatLanguage.getName())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatLanguage.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getLanguageId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Language> entityClass() {
        return Language.class;
    }
}