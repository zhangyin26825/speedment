package com.zhangyin.speedment.speedment.db0.sakila.payment.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.payment.PaymentImpl;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table speedment.db0.sakila.payment.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedPaymentManagerImpl extends AbstractSqlManager<Payment> implements GeneratedPaymentManager {
    
    private final static Tuple1<Class<Short>> PRIMARY_KEY_CLASSES = Tuples.of(Short.class);
    
    protected GeneratedPaymentManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected Payment newEntityFrom(ResultSet resultSet) throws SpeedmentException, SQLException {
        final Payment entity = newEmptyEntity();
        try {
            entity.setPaymentId(resultSet.getShort(1));
            entity.setCustomerId(resultSet.getShort(2));
            entity.setStaffId(resultSet.getByte(3));
            entity.setRentalId(getInt(resultSet, 4));
            entity.setAmount(resultSet.getBigDecimal(5));
            entity.setPaymentDate(resultSet.getTimestamp(6));
            entity.setLastUpdate(resultSet.getTimestamp(7));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Payment newEmptyEntity() {
        return new PaymentImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(Payment entity, FieldIdentifier<Payment> identifier) {
        switch ((Payment.Identifier) identifier) {
            case PAYMENT_ID : return entity.getPaymentId();
            case CUSTOMER_ID : return entity.getCustomerId();
            case STAFF_ID : return entity.getStaffId();
            case RENTAL_ID : return entity.getRentalId().orElse(null);
            case AMOUNT : return entity.getAmount();
            case PAYMENT_DATE : return entity.getPaymentDate();
            case LAST_UPDATE : return entity.getLastUpdate();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(Payment entity, FieldIdentifier<Payment> identifier, Object value) {
        switch ((Payment.Identifier) identifier) {
            case PAYMENT_ID : entity.setPaymentId((Short) value); break;
            case CUSTOMER_ID : entity.setCustomerId((Short) value); break;
            case STAFF_ID : entity.setStaffId((Byte) value); break;
            case RENTAL_ID : entity.setRentalId((Integer) value); break;
            case AMOUNT : entity.setAmount((BigDecimal) value); break;
            case PAYMENT_DATE : entity.setPaymentDate((Timestamp) value); break;
            case LAST_UPDATE : entity.setLastUpdate((Timestamp) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            Payment.PAYMENT_ID,
            Payment.CUSTOMER_ID,
            Payment.STAFF_ID,
            Payment.RENTAL_ID,
            Payment.AMOUNT,
            Payment.PAYMENT_DATE,
            Payment.LAST_UPDATE
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            Payment.PAYMENT_ID
        );
    }
    
    @Override
    public Tuple1<Class<Short>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
}