package com.zhangyin.speedment.speedment.db0.sakila.rental.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.customer.Customer;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.Inventory;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.rental.RentalImpl;
import com.zhangyin.speedment.speedment.db0.sakila.staff.Staff;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.rental.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedRentalImpl extends AbstractBaseEntity<Rental> implements Rental {
    
    private Integer rentalId;
    private Timestamp rentalDate;
    private Integer inventoryId;
    private Short customerId;
    private Timestamp returnDate;
    private Byte staffId;
    private Timestamp lastUpdate;
    
    protected GeneratedRentalImpl() {
        
    }
    
    @Override
    public Customer findCustomerId() {
        return managerOf_(Customer.class).findAny(Customer.CUSTOMER_ID, getCustomerId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Customer is set to " + getCustomerId()
                ));
            
    }
    
    @Override
    public Inventory findInventoryId() {
        return managerOf_(Inventory.class).findAny(Inventory.INVENTORY_ID, getInventoryId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Inventory is set to " + getInventoryId()
                ));
            
    }
    
    @Override
    public Staff findStaffId() {
        return managerOf_(Staff.class).findAny(Staff.STAFF_ID, getStaffId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Staff is set to " + getStaffId()
                ));
            
    }
    
    @Override
    public Integer getRentalId() {
        return rentalId;
    }
    
    @Override
    public Timestamp getRentalDate() {
        return rentalDate;
    }
    
    @Override
    public Integer getInventoryId() {
        return inventoryId;
    }
    
    @Override
    public Short getCustomerId() {
        return customerId;
    }
    
    @Override
    public Optional<Timestamp> getReturnDate() {
        return Optional.ofNullable(returnDate);
    }
    
    @Override
    public Byte getStaffId() {
        return staffId;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Rental setRentalId(Integer rentalId) {
        this.rentalId = rentalId;
        return this;
    }
    
    @Override
    public final Rental setRentalDate(Timestamp rentalDate) {
        this.rentalDate = rentalDate;
        return this;
    }
    
    @Override
    public final Rental setInventoryId(Integer inventoryId) {
        this.inventoryId = inventoryId;
        return this;
    }
    
    @Override
    public final Rental setCustomerId(Short customerId) {
        this.customerId = customerId;
        return this;
    }
    
    @Override
    public final Rental setReturnDate(Timestamp returnDate) {
        this.returnDate = returnDate;
        return this;
    }
    
    @Override
    public final Rental setStaffId(Byte staffId) {
        this.staffId = staffId;
        return this;
    }
    
    @Override
    public final Rental setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<Payment> findPaymentsByRentalId() {
        return managerOf_(Payment.class)
                .stream().filter(Payment.RENTAL_ID.equal(this.getRentalId()));
    }
    
    @Override
    public Stream<Payment> findPayments() {
        return findPaymentsByRentalId();
    }
    
    @Override
    public Rental copy() {
        final Rental rental = new RentalImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedRentalImpl.this.speedment();
            }
        };
        
        setRentalId(rental.getRentalId());
        setRentalDate(rental.getRentalDate());
        setInventoryId(rental.getInventoryId());
        setCustomerId(rental.getCustomerId());
        rental.getReturnDate().ifPresent(this::setReturnDate);
        setStaffId(rental.getStaffId());
        setLastUpdate(rental.getLastUpdate());
        
        return rental;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("rentalId = "+Objects.toString(getRentalId()));
        sj.add("rentalDate = "+Objects.toString(getRentalDate()));
        sj.add("inventoryId = "+Objects.toString(getInventoryId()));
        sj.add("customerId = "+Objects.toString(getCustomerId()));
        sj.add("returnDate = "+Objects.toString(getReturnDate().orElse(null)));
        sj.add("staffId = "+Objects.toString(getStaffId()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "RentalImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Rental)) { return false; }
        final Rental thatRental = (Rental)that;
        if (!Objects.equals(this.getRentalId(), thatRental.getRentalId())) {return false; }
        if (!Objects.equals(this.getRentalDate(), thatRental.getRentalDate())) {return false; }
        if (!Objects.equals(this.getInventoryId(), thatRental.getInventoryId())) {return false; }
        if (!Objects.equals(this.getCustomerId(), thatRental.getCustomerId())) {return false; }
        if (!Objects.equals(this.getReturnDate(), thatRental.getReturnDate())) {return false; }
        if (!Objects.equals(this.getStaffId(), thatRental.getStaffId())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatRental.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getRentalId());
        hash = 31 * hash + Objects.hashCode(getRentalDate());
        hash = 31 * hash + Objects.hashCode(getInventoryId());
        hash = 31 * hash + Objects.hashCode(getCustomerId());
        hash = 31 * hash + Objects.hashCode(getReturnDate());
        hash = 31 * hash + Objects.hashCode(getStaffId());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Rental> entityClass() {
        return Rental.class;
    }
}