package com.zhangyin.speedment.speedment.db0.sakila.category.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import com.zhangyin.speedment.speedment.db0.sakila.category.Category;
import com.zhangyin.speedment.speedment.db0.sakila.category.CategoryImpl;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table speedment.db0.sakila.category.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedCategoryManagerImpl extends AbstractSqlManager<Category> implements GeneratedCategoryManager {
    
    private final static Tuple1<Class<Byte>> PRIMARY_KEY_CLASSES = Tuples.of(Byte.class);
    
    protected GeneratedCategoryManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected Category newEntityFrom(ResultSet resultSet) throws SpeedmentException, SQLException {
        final Category entity = newEmptyEntity();
        try {
            entity.setCategoryId(resultSet.getByte(1));
            entity.setName(resultSet.getString(2));
            entity.setLastUpdate(resultSet.getTimestamp(3));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Category newEmptyEntity() {
        return new CategoryImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(Category entity, FieldIdentifier<Category> identifier) {
        switch ((Category.Identifier) identifier) {
            case CATEGORY_ID : return entity.getCategoryId();
            case NAME : return entity.getName();
            case LAST_UPDATE : return entity.getLastUpdate();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(Category entity, FieldIdentifier<Category> identifier, Object value) {
        switch ((Category.Identifier) identifier) {
            case CATEGORY_ID : entity.setCategoryId((Byte) value); break;
            case NAME : entity.setName((String) value); break;
            case LAST_UPDATE : entity.setLastUpdate((Timestamp) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            Category.CATEGORY_ID,
            Category.NAME,
            Category.LAST_UPDATE
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            Category.CATEGORY_ID
        );
    }
    
    @Override
    public Tuple1<Class<Byte>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
}