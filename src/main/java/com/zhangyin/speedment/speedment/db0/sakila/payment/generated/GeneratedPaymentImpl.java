package com.zhangyin.speedment.speedment.db0.sakila.payment.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.customer.Customer;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.payment.PaymentImpl;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.staff.Staff;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.payment.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedPaymentImpl extends AbstractBaseEntity<Payment> implements Payment {
    
    private Short paymentId;
    private Short customerId;
    private Byte staffId;
    private Integer rentalId;
    private BigDecimal amount;
    private Timestamp paymentDate;
    private Timestamp lastUpdate;
    
    protected GeneratedPaymentImpl() {
        
    }
    
    @Override
    public Customer findCustomerId() {
        return managerOf_(Customer.class).findAny(Customer.CUSTOMER_ID, getCustomerId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Customer is set to " + getCustomerId()
                ));
            
    }
    
    @Override
    public Optional<Rental> findRentalId() {
        return getRentalId()
            .flatMap(rentalId_ -> managerOf_(Rental.class).findAny(Rental.RENTAL_ID, rentalId_));
    }
    
    @Override
    public Staff findStaffId() {
        return managerOf_(Staff.class).findAny(Staff.STAFF_ID, getStaffId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Staff is set to " + getStaffId()
                ));
            
    }
    
    @Override
    public Short getPaymentId() {
        return paymentId;
    }
    
    @Override
    public Short getCustomerId() {
        return customerId;
    }
    
    @Override
    public Byte getStaffId() {
        return staffId;
    }
    
    @Override
    public Optional<Integer> getRentalId() {
        return Optional.ofNullable(rentalId);
    }
    
    @Override
    public BigDecimal getAmount() {
        return amount;
    }
    
    @Override
    public Timestamp getPaymentDate() {
        return paymentDate;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Payment setPaymentId(Short paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    @Override
    public final Payment setCustomerId(Short customerId) {
        this.customerId = customerId;
        return this;
    }
    
    @Override
    public final Payment setStaffId(Byte staffId) {
        this.staffId = staffId;
        return this;
    }
    
    @Override
    public final Payment setRentalId(Integer rentalId) {
        this.rentalId = rentalId;
        return this;
    }
    
    @Override
    public final Payment setAmount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }
    
    @Override
    public final Payment setPaymentDate(Timestamp paymentDate) {
        this.paymentDate = paymentDate;
        return this;
    }
    
    @Override
    public final Payment setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Payment copy() {
        final Payment payment = new PaymentImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedPaymentImpl.this.speedment();
            }
        };
        
        setPaymentId(payment.getPaymentId());
        setCustomerId(payment.getCustomerId());
        setStaffId(payment.getStaffId());
        payment.getRentalId().ifPresent(this::setRentalId);
        setAmount(payment.getAmount());
        setPaymentDate(payment.getPaymentDate());
        setLastUpdate(payment.getLastUpdate());
        
        return payment;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("paymentId = "+Objects.toString(getPaymentId()));
        sj.add("customerId = "+Objects.toString(getCustomerId()));
        sj.add("staffId = "+Objects.toString(getStaffId()));
        sj.add("rentalId = "+Objects.toString(getRentalId().orElse(null)));
        sj.add("amount = "+Objects.toString(getAmount()));
        sj.add("paymentDate = "+Objects.toString(getPaymentDate()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "PaymentImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Payment)) { return false; }
        final Payment thatPayment = (Payment)that;
        if (!Objects.equals(this.getPaymentId(), thatPayment.getPaymentId())) {return false; }
        if (!Objects.equals(this.getCustomerId(), thatPayment.getCustomerId())) {return false; }
        if (!Objects.equals(this.getStaffId(), thatPayment.getStaffId())) {return false; }
        if (!Objects.equals(this.getRentalId(), thatPayment.getRentalId())) {return false; }
        if (!Objects.equals(this.getAmount(), thatPayment.getAmount())) {return false; }
        if (!Objects.equals(this.getPaymentDate(), thatPayment.getPaymentDate())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatPayment.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getPaymentId());
        hash = 31 * hash + Objects.hashCode(getCustomerId());
        hash = 31 * hash + Objects.hashCode(getStaffId());
        hash = 31 * hash + Objects.hashCode(getRentalId());
        hash = 31 * hash + Objects.hashCode(getAmount());
        hash = 31 * hash + Objects.hashCode(getPaymentDate());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Payment> entityClass() {
        return Payment.class;
    }
}