package com.zhangyin.speedment.speedment.db0.sakila.staff.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.BlobIdentityMapper;
import com.speedment.config.db.mapper.identity.ByteIdentityMapper;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.ReferenceField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.speedment.internal.core.field.ReferenceFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.staff.Staff;
import com.zhangyin.speedment.speedment.db0.sakila.store.Store;
import java.sql.Blob;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.staff.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedStaff extends Entity<Staff> {
    
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getStaffId()} method.
     */
    final ComparableField<Staff, Byte, Byte> STAFF_ID = new ComparableFieldImpl<>(Identifier.STAFF_ID, Staff::getStaffId, Staff::setStaffId, new ByteIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getFirstName()} method.
     */
    final StringField<Staff, String> FIRST_NAME = new StringFieldImpl<>(Identifier.FIRST_NAME, Staff::getFirstName, Staff::setFirstName, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getLastName()} method.
     */
    final StringField<Staff, String> LAST_NAME = new StringFieldImpl<>(Identifier.LAST_NAME, Staff::getLastName, Staff::setLastName, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getAddressId()} method.
     */
    final ComparableForeignKeyField<Staff, Short, Short, Address> ADDRESS_ID = new ComparableForeignKeyFieldImpl<>(Identifier.ADDRESS_ID, Staff::getAddressId, Staff::setAddressId, Staff::findAddressId, new ShortIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getPicture()} method.
     */
    final ReferenceField<Staff, Blob, Blob> PICTURE = new ReferenceFieldImpl<>(Identifier.PICTURE, o -> o.getPicture().orElse(null), Staff::setPicture, new BlobIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getEmail()} method.
     */
    final StringField<Staff, String> EMAIL = new StringFieldImpl<>(Identifier.EMAIL, o -> o.getEmail().orElse(null), Staff::setEmail, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getStoreId()} method.
     */
    final ComparableForeignKeyField<Staff, Byte, Byte, Store> STORE_ID = new ComparableForeignKeyFieldImpl<>(Identifier.STORE_ID, Staff::getStoreId, Staff::setStoreId, Staff::findStoreId, new ByteIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getActive()} method.
     */
    final ComparableField<Staff, Integer, Integer> ACTIVE = new ComparableFieldImpl<>(Identifier.ACTIVE, Staff::getActive, Staff::setActive, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getUsername()} method.
     */
    final StringField<Staff, String> USERNAME = new StringFieldImpl<>(Identifier.USERNAME, Staff::getUsername, Staff::setUsername, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getPassword()} method.
     */
    final StringField<Staff, String> PASSWORD = new StringFieldImpl<>(Identifier.PASSWORD, o -> o.getPassword().orElse(null), Staff::setPassword, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getLastUpdate()} method.
     */
    final ComparableField<Staff, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, Staff::getLastUpdate, Staff::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Address} referenced by the
     * field that can be obtained using {@link Staff#getAddressId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Staff entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Address} referenced by the field
     * that can be obtained using {@link Staff#getAddressId()}
     */
    Address findAddressId();
    
    /**
     * Finds and returns the foreign key Entity {@link Store} referenced by the
     * field that can be obtained using {@link Staff#getStoreId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Staff entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Store} referenced by the field that
     * can be obtained using {@link Staff#getStoreId()}
     */
    Store findStoreId();
    
    /**
     * Returns the staffId of this Staff. The staffId field corresponds to the
     * database column db0.sakila.staff.staff_id.
     * 
     * @return the staffId of this Staff
     */
    Byte getStaffId();
    
    /**
     * Returns the firstName of this Staff. The firstName field corresponds to
     * the database column db0.sakila.staff.first_name.
     * 
     * @return the firstName of this Staff
     */
    String getFirstName();
    
    /**
     * Returns the lastName of this Staff. The lastName field corresponds to the
     * database column db0.sakila.staff.last_name.
     * 
     * @return the lastName of this Staff
     */
    String getLastName();
    
    /**
     * Returns the addressId of this Staff. The addressId field corresponds to
     * the database column db0.sakila.staff.address_id.
     * 
     * @return the addressId of this Staff
     */
    Short getAddressId();
    
    /**
     * Returns the picture of this Staff. The picture field corresponds to the
     * database column db0.sakila.staff.picture.
     * 
     * @return the picture of this Staff
     */
    Optional<Blob> getPicture();
    
    /**
     * Returns the email of this Staff. The email field corresponds to the
     * database column db0.sakila.staff.email.
     * 
     * @return the email of this Staff
     */
    Optional<String> getEmail();
    
    /**
     * Returns the storeId of this Staff. The storeId field corresponds to the
     * database column db0.sakila.staff.store_id.
     * 
     * @return the storeId of this Staff
     */
    Byte getStoreId();
    
    /**
     * Returns the active of this Staff. The active field corresponds to the
     * database column db0.sakila.staff.active.
     * 
     * @return the active of this Staff
     */
    Integer getActive();
    
    /**
     * Returns the username of this Staff. The username field corresponds to the
     * database column db0.sakila.staff.username.
     * 
     * @return the username of this Staff
     */
    String getUsername();
    
    /**
     * Returns the password of this Staff. The password field corresponds to the
     * database column db0.sakila.staff.password.
     * 
     * @return the password of this Staff
     */
    Optional<String> getPassword();
    
    /**
     * Returns the lastUpdate of this Staff. The lastUpdate field corresponds to
     * the database column db0.sakila.staff.last_update.
     * 
     * @return the lastUpdate of this Staff
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the staffId of this Staff. The staffId field corresponds to the
     * database column db0.sakila.staff.staff_id.
     * 
     * @param staffId to set of this Staff
     * @return this Staff instance
     */
    Staff setStaffId(Byte staffId);
    
    /**
     * Sets the firstName of this Staff. The firstName field corresponds to the
     * database column db0.sakila.staff.first_name.
     * 
     * @param firstName to set of this Staff
     * @return this Staff instance
     */
    Staff setFirstName(String firstName);
    
    /**
     * Sets the lastName of this Staff. The lastName field corresponds to the
     * database column db0.sakila.staff.last_name.
     * 
     * @param lastName to set of this Staff
     * @return this Staff instance
     */
    Staff setLastName(String lastName);
    
    /**
     * Sets the addressId of this Staff. The addressId field corresponds to the
     * database column db0.sakila.staff.address_id.
     * 
     * @param addressId to set of this Staff
     * @return this Staff instance
     */
    Staff setAddressId(Short addressId);
    
    /**
     * Sets the picture of this Staff. The picture field corresponds to the
     * database column db0.sakila.staff.picture.
     * 
     * @param picture to set of this Staff
     * @return this Staff instance
     */
    Staff setPicture(Blob picture);
    
    /**
     * Sets the email of this Staff. The email field corresponds to the database
     * column db0.sakila.staff.email.
     * 
     * @param email to set of this Staff
     * @return this Staff instance
     */
    Staff setEmail(String email);
    
    /**
     * Sets the storeId of this Staff. The storeId field corresponds to the
     * database column db0.sakila.staff.store_id.
     * 
     * @param storeId to set of this Staff
     * @return this Staff instance
     */
    Staff setStoreId(Byte storeId);
    
    /**
     * Sets the active of this Staff. The active field corresponds to the
     * database column db0.sakila.staff.active.
     * 
     * @param active to set of this Staff
     * @return this Staff instance
     */
    Staff setActive(Integer active);
    
    /**
     * Sets the username of this Staff. The username field corresponds to the
     * database column db0.sakila.staff.username.
     * 
     * @param username to set of this Staff
     * @return this Staff instance
     */
    Staff setUsername(String username);
    
    /**
     * Sets the password of this Staff. The password field corresponds to the
     * database column db0.sakila.staff.password.
     * 
     * @param password to set of this Staff
     * @return this Staff instance
     */
    Staff setPassword(String password);
    
    /**
     * Sets the lastUpdate of this Staff. The lastUpdate field corresponds to the
     * database column db0.sakila.staff.last_update.
     * 
     * @param lastUpdate to set of this Staff
     * @return this Staff instance
     */
    Staff setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Payment} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Payment#getStaffId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Payment} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Payment#getStaffId()}
     */
    Stream<Payment> findPaymentsByStaffId();
    
    /**
     * Creates and returns a {@link Stream} of all {@link Rental} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Rental#getStaffId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Rental} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Rental#getStaffId()}
     */
    Stream<Rental> findRentalsByStaffId();
    
    /**
     * Creates and returns a {@link Stream} of all {@link Store} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Store#getManagerStaffId()}. The order of the Entities are undefined
     * and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Store} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Store#getManagerStaffId()}
     */
    Stream<Store> findStoresByManagerStaffId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Payment} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Payment} Entities
     * that references this Entity by a foreign key
     */
    Stream<Payment> findPayments();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Rental} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Rental} Entities
     * that references this Entity by a foreign key
     */
    Stream<Rental> findRentals();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Store} Entities that references this Entity by a foreign key. The order of
     * the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Store} Entities
     * that references this Entity by a foreign key
     */
    Stream<Store> findStores();
    
    enum Identifier implements FieldIdentifier<Staff> {
        
        STAFF_ID ("staff_id"),
        FIRST_NAME ("first_name"),
        LAST_NAME ("last_name"),
        ADDRESS_ID ("address_id"),
        PICTURE ("picture"),
        EMAIL ("email"),
        STORE_ID ("store_id"),
        ACTIVE ("active"),
        USERNAME ("username"),
        PASSWORD ("password"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "staff";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}