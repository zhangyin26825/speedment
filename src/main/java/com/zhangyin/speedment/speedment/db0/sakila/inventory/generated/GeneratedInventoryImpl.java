package com.zhangyin.speedment.speedment.db0.sakila.inventory.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.film.Film;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.Inventory;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.InventoryImpl;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.store.Store;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.inventory.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedInventoryImpl extends AbstractBaseEntity<Inventory> implements Inventory {
    
    private Integer inventoryId;
    private Short filmId;
    private Byte storeId;
    private Timestamp lastUpdate;
    
    protected GeneratedInventoryImpl() {
        
    }
    
    @Override
    public Film findFilmId() {
        return managerOf_(Film.class).findAny(Film.FILM_ID, getFilmId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Film is set to " + getFilmId()
                ));
            
    }
    
    @Override
    public Store findStoreId() {
        return managerOf_(Store.class).findAny(Store.STORE_ID, getStoreId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Store is set to " + getStoreId()
                ));
            
    }
    
    @Override
    public Integer getInventoryId() {
        return inventoryId;
    }
    
    @Override
    public Short getFilmId() {
        return filmId;
    }
    
    @Override
    public Byte getStoreId() {
        return storeId;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Inventory setInventoryId(Integer inventoryId) {
        this.inventoryId = inventoryId;
        return this;
    }
    
    @Override
    public final Inventory setFilmId(Short filmId) {
        this.filmId = filmId;
        return this;
    }
    
    @Override
    public final Inventory setStoreId(Byte storeId) {
        this.storeId = storeId;
        return this;
    }
    
    @Override
    public final Inventory setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<Rental> findRentalsByInventoryId() {
        return managerOf_(Rental.class)
                .stream().filter(Rental.INVENTORY_ID.equal(this.getInventoryId()));
    }
    
    @Override
    public Stream<Rental> findRentals() {
        return findRentalsByInventoryId();
    }
    
    @Override
    public Inventory copy() {
        final Inventory inventory = new InventoryImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedInventoryImpl.this.speedment();
            }
        };
        
        setInventoryId(inventory.getInventoryId());
        setFilmId(inventory.getFilmId());
        setStoreId(inventory.getStoreId());
        setLastUpdate(inventory.getLastUpdate());
        
        return inventory;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("inventoryId = "+Objects.toString(getInventoryId()));
        sj.add("filmId = "+Objects.toString(getFilmId()));
        sj.add("storeId = "+Objects.toString(getStoreId()));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "InventoryImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Inventory)) { return false; }
        final Inventory thatInventory = (Inventory)that;
        if (!Objects.equals(this.getInventoryId(), thatInventory.getInventoryId())) {return false; }
        if (!Objects.equals(this.getFilmId(), thatInventory.getFilmId())) {return false; }
        if (!Objects.equals(this.getStoreId(), thatInventory.getStoreId())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatInventory.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getInventoryId());
        hash = 31 * hash + Objects.hashCode(getFilmId());
        hash = 31 * hash + Objects.hashCode(getStoreId());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Inventory> entityClass() {
        return Inventory.class;
    }
}