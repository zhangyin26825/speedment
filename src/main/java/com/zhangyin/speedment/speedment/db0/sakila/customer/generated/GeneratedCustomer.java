package com.zhangyin.speedment.speedment.db0.sakila.customer.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.ByteIdentityMapper;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.ShortIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.customer.Customer;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.store.Store;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table speedment.db0.sakila.customer.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedCustomer extends Entity<Customer> {
    
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getCustomerId()} method.
     */
    final ComparableField<Customer, Short, Short> CUSTOMER_ID = new ComparableFieldImpl<>(Identifier.CUSTOMER_ID, Customer::getCustomerId, Customer::setCustomerId, new ShortIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getStoreId()} method.
     */
    final ComparableForeignKeyField<Customer, Byte, Byte, Store> STORE_ID = new ComparableForeignKeyFieldImpl<>(Identifier.STORE_ID, Customer::getStoreId, Customer::setStoreId, Customer::findStoreId, new ByteIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getFirstName()} method.
     */
    final StringField<Customer, String> FIRST_NAME = new StringFieldImpl<>(Identifier.FIRST_NAME, Customer::getFirstName, Customer::setFirstName, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getLastName()} method.
     */
    final StringField<Customer, String> LAST_NAME = new StringFieldImpl<>(Identifier.LAST_NAME, Customer::getLastName, Customer::setLastName, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getEmail()} method.
     */
    final StringField<Customer, String> EMAIL = new StringFieldImpl<>(Identifier.EMAIL, o -> o.getEmail().orElse(null), Customer::setEmail, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getAddressId()} method.
     */
    final ComparableForeignKeyField<Customer, Short, Short, Address> ADDRESS_ID = new ComparableForeignKeyFieldImpl<>(Identifier.ADDRESS_ID, Customer::getAddressId, Customer::setAddressId, Customer::findAddressId, new ShortIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getActive()} method.
     */
    final ComparableField<Customer, Integer, Integer> ACTIVE = new ComparableFieldImpl<>(Identifier.ACTIVE, Customer::getActive, Customer::setActive, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getCreateDate()} method.
     */
    final ComparableField<Customer, Timestamp, Timestamp> CREATE_DATE = new ComparableFieldImpl<>(Identifier.CREATE_DATE, Customer::getCreateDate, Customer::setCreateDate, new TimestampIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getLastUpdate()} method.
     */
    final ComparableField<Customer, Timestamp, Timestamp> LAST_UPDATE = new ComparableFieldImpl<>(Identifier.LAST_UPDATE, Customer::getLastUpdate, Customer::setLastUpdate, new TimestampIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Address} referenced by the
     * field that can be obtained using {@link Customer#getAddressId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Customer entities
     * and call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Address} referenced by the field
     * that can be obtained using {@link Customer#getAddressId()}
     */
    Address findAddressId();
    
    /**
     * Finds and returns the foreign key Entity {@link Store} referenced by the
     * field that can be obtained using {@link Customer#getStoreId()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Customer entities
     * and call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Store} referenced by the field that
     * can be obtained using {@link Customer#getStoreId()}
     */
    Store findStoreId();
    
    /**
     * Returns the customerId of this Customer. The customerId field corresponds
     * to the database column db0.sakila.customer.customer_id.
     * 
     * @return the customerId of this Customer
     */
    Short getCustomerId();
    
    /**
     * Returns the storeId of this Customer. The storeId field corresponds to the
     * database column db0.sakila.customer.store_id.
     * 
     * @return the storeId of this Customer
     */
    Byte getStoreId();
    
    /**
     * Returns the firstName of this Customer. The firstName field corresponds to
     * the database column db0.sakila.customer.first_name.
     * 
     * @return the firstName of this Customer
     */
    String getFirstName();
    
    /**
     * Returns the lastName of this Customer. The lastName field corresponds to
     * the database column db0.sakila.customer.last_name.
     * 
     * @return the lastName of this Customer
     */
    String getLastName();
    
    /**
     * Returns the email of this Customer. The email field corresponds to the
     * database column db0.sakila.customer.email.
     * 
     * @return the email of this Customer
     */
    Optional<String> getEmail();
    
    /**
     * Returns the addressId of this Customer. The addressId field corresponds to
     * the database column db0.sakila.customer.address_id.
     * 
     * @return the addressId of this Customer
     */
    Short getAddressId();
    
    /**
     * Returns the active of this Customer. The active field corresponds to the
     * database column db0.sakila.customer.active.
     * 
     * @return the active of this Customer
     */
    Integer getActive();
    
    /**
     * Returns the createDate of this Customer. The createDate field corresponds
     * to the database column db0.sakila.customer.create_date.
     * 
     * @return the createDate of this Customer
     */
    Timestamp getCreateDate();
    
    /**
     * Returns the lastUpdate of this Customer. The lastUpdate field corresponds
     * to the database column db0.sakila.customer.last_update.
     * 
     * @return the lastUpdate of this Customer
     */
    Timestamp getLastUpdate();
    
    /**
     * Sets the customerId of this Customer. The customerId field corresponds to
     * the database column db0.sakila.customer.customer_id.
     * 
     * @param customerId to set of this Customer
     * @return this Customer instance
     */
    Customer setCustomerId(Short customerId);
    
    /**
     * Sets the storeId of this Customer. The storeId field corresponds to the
     * database column db0.sakila.customer.store_id.
     * 
     * @param storeId to set of this Customer
     * @return this Customer instance
     */
    Customer setStoreId(Byte storeId);
    
    /**
     * Sets the firstName of this Customer. The firstName field corresponds to
     * the database column db0.sakila.customer.first_name.
     * 
     * @param firstName to set of this Customer
     * @return this Customer instance
     */
    Customer setFirstName(String firstName);
    
    /**
     * Sets the lastName of this Customer. The lastName field corresponds to the
     * database column db0.sakila.customer.last_name.
     * 
     * @param lastName to set of this Customer
     * @return this Customer instance
     */
    Customer setLastName(String lastName);
    
    /**
     * Sets the email of this Customer. The email field corresponds to the
     * database column db0.sakila.customer.email.
     * 
     * @param email to set of this Customer
     * @return this Customer instance
     */
    Customer setEmail(String email);
    
    /**
     * Sets the addressId of this Customer. The addressId field corresponds to
     * the database column db0.sakila.customer.address_id.
     * 
     * @param addressId to set of this Customer
     * @return this Customer instance
     */
    Customer setAddressId(Short addressId);
    
    /**
     * Sets the active of this Customer. The active field corresponds to the
     * database column db0.sakila.customer.active.
     * 
     * @param active to set of this Customer
     * @return this Customer instance
     */
    Customer setActive(Integer active);
    
    /**
     * Sets the createDate of this Customer. The createDate field corresponds to
     * the database column db0.sakila.customer.create_date.
     * 
     * @param createDate to set of this Customer
     * @return this Customer instance
     */
    Customer setCreateDate(Timestamp createDate);
    
    /**
     * Sets the lastUpdate of this Customer. The lastUpdate field corresponds to
     * the database column db0.sakila.customer.last_update.
     * 
     * @param lastUpdate to set of this Customer
     * @return this Customer instance
     */
    Customer setLastUpdate(Timestamp lastUpdate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Payment} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Payment#getCustomerId()}. The order of the Entities are undefined
     * and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Payment} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Payment#getCustomerId()}
     */
    Stream<Payment> findPaymentsByCustomerId();
    
    /**
     * Creates and returns a {@link Stream} of all {@link Rental} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Rental#getCustomerId()}. The order of the Entities are undefined
     * and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Rental} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Rental#getCustomerId()}
     */
    Stream<Rental> findRentalsByCustomerId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Payment} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Payment} Entities
     * that references this Entity by a foreign key
     */
    Stream<Payment> findPayments();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Rental} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Rental} Entities
     * that references this Entity by a foreign key
     */
    Stream<Rental> findRentals();
    
    enum Identifier implements FieldIdentifier<Customer> {
        
        CUSTOMER_ID ("customer_id"),
        STORE_ID ("store_id"),
        FIRST_NAME ("first_name"),
        LAST_NAME ("last_name"),
        EMAIL ("email"),
        ADDRESS_ID ("address_id"),
        ACTIVE ("active"),
        CREATE_DATE ("create_date"),
        LAST_UPDATE ("last_update");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sakila";
        }
        
        @Override
        public String tableName() {
            return "customer";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}