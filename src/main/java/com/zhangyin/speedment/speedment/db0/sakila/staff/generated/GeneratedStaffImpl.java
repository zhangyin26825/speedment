package com.zhangyin.speedment.speedment.db0.sakila.staff.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.address.Address;
import com.zhangyin.speedment.speedment.db0.sakila.payment.Payment;
import com.zhangyin.speedment.speedment.db0.sakila.rental.Rental;
import com.zhangyin.speedment.speedment.db0.sakila.staff.Staff;
import com.zhangyin.speedment.speedment.db0.sakila.staff.StaffImpl;
import com.zhangyin.speedment.speedment.db0.sakila.store.Store;
import java.sql.Blob;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.staff.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedStaffImpl extends AbstractBaseEntity<Staff> implements Staff {
    
    private Byte staffId;
    private String firstName;
    private String lastName;
    private Short addressId;
    private Blob picture;
    private String email;
    private Byte storeId;
    private Integer active;
    private String username;
    private String password;
    private Timestamp lastUpdate;
    
    protected GeneratedStaffImpl() {
        
    }
    
    @Override
    public Address findAddressId() {
        return managerOf_(Address.class).findAny(Address.ADDRESS_ID, getAddressId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Address is set to " + getAddressId()
                ));
            
    }
    
    @Override
    public Store findStoreId() {
        return managerOf_(Store.class).findAny(Store.STORE_ID, getStoreId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Store is set to " + getStoreId()
                ));
            
    }
    
    @Override
    public Byte getStaffId() {
        return staffId;
    }
    
    @Override
    public String getFirstName() {
        return firstName;
    }
    
    @Override
    public String getLastName() {
        return lastName;
    }
    
    @Override
    public Short getAddressId() {
        return addressId;
    }
    
    @Override
    public Optional<Blob> getPicture() {
        return Optional.ofNullable(picture);
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Byte getStoreId() {
        return storeId;
    }
    
    @Override
    public Integer getActive() {
        return active;
    }
    
    @Override
    public String getUsername() {
        return username;
    }
    
    @Override
    public Optional<String> getPassword() {
        return Optional.ofNullable(password);
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Staff setStaffId(Byte staffId) {
        this.staffId = staffId;
        return this;
    }
    
    @Override
    public final Staff setFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    @Override
    public final Staff setLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public final Staff setAddressId(Short addressId) {
        this.addressId = addressId;
        return this;
    }
    
    @Override
    public final Staff setPicture(Blob picture) {
        this.picture = picture;
        return this;
    }
    
    @Override
    public final Staff setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public final Staff setStoreId(Byte storeId) {
        this.storeId = storeId;
        return this;
    }
    
    @Override
    public final Staff setActive(Integer active) {
        this.active = active;
        return this;
    }
    
    @Override
    public final Staff setUsername(String username) {
        this.username = username;
        return this;
    }
    
    @Override
    public final Staff setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public final Staff setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<Payment> findPaymentsByStaffId() {
        return managerOf_(Payment.class)
                .stream().filter(Payment.STAFF_ID.equal(this.getStaffId()));
    }
    
    @Override
    public Stream<Rental> findRentalsByStaffId() {
        return managerOf_(Rental.class)
                .stream().filter(Rental.STAFF_ID.equal(this.getStaffId()));
    }
    
    @Override
    public Stream<Store> findStoresByManagerStaffId() {
        return managerOf_(Store.class)
                .stream().filter(Store.MANAGER_STAFF_ID.equal(this.getStaffId()));
    }
    
    @Override
    public Stream<Payment> findPayments() {
        return findPaymentsByStaffId();
    }
    
    @Override
    public Stream<Rental> findRentals() {
        return findRentalsByStaffId();
    }
    
    @Override
    public Stream<Store> findStores() {
        return findStoresByManagerStaffId();
    }
    
    @Override
    public Staff copy() {
        final Staff staff = new StaffImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedStaffImpl.this.speedment();
            }
        };
        
        setStaffId(staff.getStaffId());
        setFirstName(staff.getFirstName());
        setLastName(staff.getLastName());
        setAddressId(staff.getAddressId());
        staff.getPicture().ifPresent(this::setPicture);
        staff.getEmail().ifPresent(this::setEmail);
        setStoreId(staff.getStoreId());
        setActive(staff.getActive());
        setUsername(staff.getUsername());
        staff.getPassword().ifPresent(this::setPassword);
        setLastUpdate(staff.getLastUpdate());
        
        return staff;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("staffId = "+Objects.toString(getStaffId()));
        sj.add("firstName = "+Objects.toString(getFirstName()));
        sj.add("lastName = "+Objects.toString(getLastName()));
        sj.add("addressId = "+Objects.toString(getAddressId()));
        sj.add("picture = "+Objects.toString(getPicture().orElse(null)));
        sj.add("email = "+Objects.toString(getEmail().orElse(null)));
        sj.add("storeId = "+Objects.toString(getStoreId()));
        sj.add("active = "+Objects.toString(getActive()));
        sj.add("username = "+Objects.toString(getUsername()));
        sj.add("password = "+Objects.toString(getPassword().orElse(null)));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "StaffImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Staff)) { return false; }
        final Staff thatStaff = (Staff)that;
        if (!Objects.equals(this.getStaffId(), thatStaff.getStaffId())) {return false; }
        if (!Objects.equals(this.getFirstName(), thatStaff.getFirstName())) {return false; }
        if (!Objects.equals(this.getLastName(), thatStaff.getLastName())) {return false; }
        if (!Objects.equals(this.getAddressId(), thatStaff.getAddressId())) {return false; }
        if (!Objects.equals(this.getPicture(), thatStaff.getPicture())) {return false; }
        if (!Objects.equals(this.getEmail(), thatStaff.getEmail())) {return false; }
        if (!Objects.equals(this.getStoreId(), thatStaff.getStoreId())) {return false; }
        if (!Objects.equals(this.getActive(), thatStaff.getActive())) {return false; }
        if (!Objects.equals(this.getUsername(), thatStaff.getUsername())) {return false; }
        if (!Objects.equals(this.getPassword(), thatStaff.getPassword())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatStaff.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getStaffId());
        hash = 31 * hash + Objects.hashCode(getFirstName());
        hash = 31 * hash + Objects.hashCode(getLastName());
        hash = 31 * hash + Objects.hashCode(getAddressId());
        hash = 31 * hash + Objects.hashCode(getPicture());
        hash = 31 * hash + Objects.hashCode(getEmail());
        hash = 31 * hash + Objects.hashCode(getStoreId());
        hash = 31 * hash + Objects.hashCode(getActive());
        hash = 31 * hash + Objects.hashCode(getUsername());
        hash = 31 * hash + Objects.hashCode(getPassword());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Staff> entityClass() {
        return Staff.class;
    }
}