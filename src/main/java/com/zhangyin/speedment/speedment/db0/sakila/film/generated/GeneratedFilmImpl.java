package com.zhangyin.speedment.speedment.db0.sakila.film.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import com.zhangyin.speedment.speedment.db0.sakila.film.Film;
import com.zhangyin.speedment.speedment.db0.sakila.film.FilmImpl;
import com.zhangyin.speedment.speedment.db0.sakila.film_actor.FilmActor;
import com.zhangyin.speedment.speedment.db0.sakila.film_category.FilmCategory;
import com.zhangyin.speedment.speedment.db0.sakila.inventory.Inventory;
import com.zhangyin.speedment.speedment.db0.sakila.language.Language;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table speedment.db0.sakila.film.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedFilmImpl extends AbstractBaseEntity<Film> implements Film {
    
    private Short filmId;
    private String title;
    private String description;
    private Integer releaseYear;
    private Byte languageId;
    private Byte originalLanguageId;
    private Byte rentalDuration;
    private BigDecimal rentalRate;
    private Short length;
    private BigDecimal replacementCost;
    private String rating;
    private String specialFeatures;
    private Timestamp lastUpdate;
    
    protected GeneratedFilmImpl() {
        
    }
    
    @Override
    public Language findLanguageId() {
        return managerOf_(Language.class).findAny(Language.LANGUAGE_ID, getLanguageId())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Language is set to " + getLanguageId()
                ));
            
    }
    
    @Override
    public Optional<Language> findOriginalLanguageId() {
        return getOriginalLanguageId()
            .flatMap(originalLanguageId_ -> managerOf_(Language.class).findAny(Language.LANGUAGE_ID, originalLanguageId_));
    }
    
    @Override
    public Short getFilmId() {
        return filmId;
    }
    
    @Override
    public String getTitle() {
        return title;
    }
    
    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }
    
    @Override
    public Optional<Integer> getReleaseYear() {
        return Optional.ofNullable(releaseYear);
    }
    
    @Override
    public Byte getLanguageId() {
        return languageId;
    }
    
    @Override
    public Optional<Byte> getOriginalLanguageId() {
        return Optional.ofNullable(originalLanguageId);
    }
    
    @Override
    public Byte getRentalDuration() {
        return rentalDuration;
    }
    
    @Override
    public BigDecimal getRentalRate() {
        return rentalRate;
    }
    
    @Override
    public Optional<Short> getLength() {
        return Optional.ofNullable(length);
    }
    
    @Override
    public BigDecimal getReplacementCost() {
        return replacementCost;
    }
    
    @Override
    public Optional<String> getRating() {
        return Optional.ofNullable(rating);
    }
    
    @Override
    public Optional<String> getSpecialFeatures() {
        return Optional.ofNullable(specialFeatures);
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public final Film setFilmId(Short filmId) {
        this.filmId = filmId;
        return this;
    }
    
    @Override
    public final Film setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public final Film setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public final Film setReleaseYear(Integer releaseYear) {
        this.releaseYear = releaseYear;
        return this;
    }
    
    @Override
    public final Film setLanguageId(Byte languageId) {
        this.languageId = languageId;
        return this;
    }
    
    @Override
    public final Film setOriginalLanguageId(Byte originalLanguageId) {
        this.originalLanguageId = originalLanguageId;
        return this;
    }
    
    @Override
    public final Film setRentalDuration(Byte rentalDuration) {
        this.rentalDuration = rentalDuration;
        return this;
    }
    
    @Override
    public final Film setRentalRate(BigDecimal rentalRate) {
        this.rentalRate = rentalRate;
        return this;
    }
    
    @Override
    public final Film setLength(Short length) {
        this.length = length;
        return this;
    }
    
    @Override
    public final Film setReplacementCost(BigDecimal replacementCost) {
        this.replacementCost = replacementCost;
        return this;
    }
    
    @Override
    public final Film setRating(String rating) {
        this.rating = rating;
        return this;
    }
    
    @Override
    public final Film setSpecialFeatures(String specialFeatures) {
        this.specialFeatures = specialFeatures;
        return this;
    }
    
    @Override
    public final Film setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Stream<FilmActor> findFilmActorsByFilmId() {
        return managerOf_(FilmActor.class)
                .stream().filter(FilmActor.FILM_ID.equal(this.getFilmId()));
    }
    
    @Override
    public Stream<FilmCategory> findFilmCategoriesByFilmId() {
        return managerOf_(FilmCategory.class)
                .stream().filter(FilmCategory.FILM_ID.equal(this.getFilmId()));
    }
    
    @Override
    public Stream<Inventory> findInventoriesByFilmId() {
        return managerOf_(Inventory.class)
                .stream().filter(Inventory.FILM_ID.equal(this.getFilmId()));
    }
    
    @Override
    public Stream<Inventory> findInventories() {
        return findInventoriesByFilmId();
    }
    
    @Override
    public Stream<FilmCategory> findFilmCategories() {
        return findFilmCategoriesByFilmId();
    }
    
    @Override
    public Stream<FilmActor> findFilmActors() {
        return findFilmActorsByFilmId();
    }
    
    @Override
    public Film copy() {
        final Film film = new FilmImpl() {
            @Override
            protected final Speedment speedment() {
                return GeneratedFilmImpl.this.speedment();
            }
        };
        
        setFilmId(film.getFilmId());
        setTitle(film.getTitle());
        film.getDescription().ifPresent(this::setDescription);
        film.getReleaseYear().ifPresent(this::setReleaseYear);
        setLanguageId(film.getLanguageId());
        film.getOriginalLanguageId().ifPresent(this::setOriginalLanguageId);
        setRentalDuration(film.getRentalDuration());
        setRentalRate(film.getRentalRate());
        film.getLength().ifPresent(this::setLength);
        setReplacementCost(film.getReplacementCost());
        film.getRating().ifPresent(this::setRating);
        film.getSpecialFeatures().ifPresent(this::setSpecialFeatures);
        setLastUpdate(film.getLastUpdate());
        
        return film;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("filmId = "+Objects.toString(getFilmId()));
        sj.add("title = "+Objects.toString(getTitle()));
        sj.add("description = "+Objects.toString(getDescription().orElse(null)));
        sj.add("releaseYear = "+Objects.toString(getReleaseYear().orElse(null)));
        sj.add("languageId = "+Objects.toString(getLanguageId()));
        sj.add("originalLanguageId = "+Objects.toString(getOriginalLanguageId().orElse(null)));
        sj.add("rentalDuration = "+Objects.toString(getRentalDuration()));
        sj.add("rentalRate = "+Objects.toString(getRentalRate()));
        sj.add("length = "+Objects.toString(getLength().orElse(null)));
        sj.add("replacementCost = "+Objects.toString(getReplacementCost()));
        sj.add("rating = "+Objects.toString(getRating().orElse(null)));
        sj.add("specialFeatures = "+Objects.toString(getSpecialFeatures().orElse(null)));
        sj.add("lastUpdate = "+Objects.toString(getLastUpdate()));
        return "FilmImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Film)) { return false; }
        final Film thatFilm = (Film)that;
        if (!Objects.equals(this.getFilmId(), thatFilm.getFilmId())) {return false; }
        if (!Objects.equals(this.getTitle(), thatFilm.getTitle())) {return false; }
        if (!Objects.equals(this.getDescription(), thatFilm.getDescription())) {return false; }
        if (!Objects.equals(this.getReleaseYear(), thatFilm.getReleaseYear())) {return false; }
        if (!Objects.equals(this.getLanguageId(), thatFilm.getLanguageId())) {return false; }
        if (!Objects.equals(this.getOriginalLanguageId(), thatFilm.getOriginalLanguageId())) {return false; }
        if (!Objects.equals(this.getRentalDuration(), thatFilm.getRentalDuration())) {return false; }
        if (!Objects.equals(this.getRentalRate(), thatFilm.getRentalRate())) {return false; }
        if (!Objects.equals(this.getLength(), thatFilm.getLength())) {return false; }
        if (!Objects.equals(this.getReplacementCost(), thatFilm.getReplacementCost())) {return false; }
        if (!Objects.equals(this.getRating(), thatFilm.getRating())) {return false; }
        if (!Objects.equals(this.getSpecialFeatures(), thatFilm.getSpecialFeatures())) {return false; }
        if (!Objects.equals(this.getLastUpdate(), thatFilm.getLastUpdate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getFilmId());
        hash = 31 * hash + Objects.hashCode(getTitle());
        hash = 31 * hash + Objects.hashCode(getDescription());
        hash = 31 * hash + Objects.hashCode(getReleaseYear());
        hash = 31 * hash + Objects.hashCode(getLanguageId());
        hash = 31 * hash + Objects.hashCode(getOriginalLanguageId());
        hash = 31 * hash + Objects.hashCode(getRentalDuration());
        hash = 31 * hash + Objects.hashCode(getRentalRate());
        hash = 31 * hash + Objects.hashCode(getLength());
        hash = 31 * hash + Objects.hashCode(getReplacementCost());
        hash = 31 * hash + Objects.hashCode(getRating());
        hash = 31 * hash + Objects.hashCode(getSpecialFeatures());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
    
    @Override
    public Class<Film> entityClass() {
        return Film.class;
    }
}